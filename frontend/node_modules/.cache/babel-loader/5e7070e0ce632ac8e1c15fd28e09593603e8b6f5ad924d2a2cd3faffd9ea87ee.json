{"ast":null,"code":"// Sample Data Generator for Fitness Tracker\n// This utility generates realistic sample data for demonstration purposes\n\nexport const generateSampleUserData = (userProfile = {}) => {\n  const {\n    name = \"Gowthammm\",\n    age = 25,\n    gender = \"male\",\n    height = 175,\n    // cm\n    weight = 70,\n    // kg\n    activityLevel = \"moderately_active\",\n    goal = \"weight_loss\",\n    weeklyChange = 0.5\n  } = userProfile;\n\n  // Calculate target weight (assuming weight loss goal)\n  const targetWeight = goal === \"weight_loss\" ? weight - 5 : weight + 5;\n\n  // Generate realistic workout data\n  const workoutsThisWeek = Math.floor(Math.random() * 4) + 3; // 3-6 workouts\n  const totalWorkouts = Math.floor(Math.random() * 50) + 20; // 20-70 total workouts\n\n  // Generate calorie data\n  const caloriesToday = Math.floor(Math.random() * 500) + 1500; // 1500-2000 calories\n  const streakDays = Math.floor(Math.random() * 30) + 5; // 5-35 day streak\n\n  // Generate weight entries for the last 30 days\n  const weightEntries = generateWeightEntries(weight, 30);\n\n  // Generate workout history\n  const workoutHistory = generateWorkoutHistory(totalWorkouts);\n\n  // Generate meal history\n  const mealHistory = generateMealHistory(7); // Last 7 days\n\n  return {\n    // User profile data\n    name,\n    age: age.toString(),\n    gender,\n    height: height.toString(),\n    weight: weight.toString(),\n    activityLevel,\n    goal,\n    weeklyChange: weeklyChange.toString(),\n    targetWeight: targetWeight.toString(),\n    // Activity data\n    workoutsThisWeek: workoutsThisWeek.toString(),\n    totalWorkouts: totalWorkouts.toString(),\n    caloriesToday: caloriesToday.toString(),\n    streakDays: streakDays.toString(),\n    // Historical data\n    weightEntries,\n    workoutHistory,\n    mealHistory,\n    // Timestamps\n    lastUpdated: new Date().toISOString(),\n    createdAt: new Date(Date.now() - 30 * 24 * 60 * 60 * 1000).toISOString() // 30 days ago\n  };\n};\n\n// Generate realistic weight entries over time\nconst generateWeightEntries = (startingWeight, days) => {\n  const entries = [];\n  let currentWeight = startingWeight;\n  for (let i = days; i >= 0; i--) {\n    const date = new Date();\n    date.setDate(date.getDate() - i);\n\n    // Small random variation in weight (Â±0.5kg)\n    const variation = (Math.random() - 0.5) * 1;\n    currentWeight = Math.max(65, Math.min(75, currentWeight + variation));\n    entries.push({\n      id: `weight_${i}`,\n      date: date.toISOString().split('T')[0],\n      weight: Math.round(currentWeight * 10) / 10,\n      notes: i % 7 === 0 ? \"Weekly weigh-in\" : \"\"\n    });\n  }\n  return entries;\n};\n\n// Generate workout history\nconst generateWorkoutHistory = totalWorkouts => {\n  const workouts = [];\n  const workoutTypes = [\"Strength Training\", \"Cardio\", \"HIIT\", \"Yoga\", \"Running\", \"Swimming\", \"Cycling\"];\n  for (let i = 0; i < totalWorkouts; i++) {\n    const date = new Date();\n    date.setDate(date.getDate() - Math.floor(Math.random() * 30));\n    const workoutType = workoutTypes[Math.floor(Math.random() * workoutTypes.length)];\n    const duration = Math.floor(Math.random() * 60) + 30; // 30-90 minutes\n\n    workouts.push({\n      id: `workout_${i}`,\n      date: date.toISOString().split('T')[0],\n      type: workoutType,\n      duration: duration,\n      caloriesBurned: Math.floor(duration * 8 + Math.random() * 200),\n      exercises: generateExercises(workoutType)\n    });\n  }\n  return workouts.sort((a, b) => new Date(b.date) - new Date(a.date));\n};\n\n// Generate exercises for each workout\nconst generateExercises = workoutType => {\n  const exerciseMap = {\n    \"Strength Training\": [{\n      name: \"Bench Press\",\n      sets: 3,\n      reps: 10,\n      weight: 60\n    }, {\n      name: \"Squats\",\n      sets: 3,\n      reps: 12,\n      weight: 80\n    }, {\n      name: \"Deadlifts\",\n      sets: 3,\n      reps: 8,\n      weight: 100\n    }],\n    \"Cardio\": [{\n      name: \"Treadmill Running\",\n      sets: 1,\n      reps: 30,\n      weight: 0\n    }, {\n      name: \"Elliptical\",\n      sets: 1,\n      reps: 20,\n      weight: 0\n    }],\n    \"HIIT\": [{\n      name: \"Burpees\",\n      sets: 4,\n      reps: 15,\n      weight: 0\n    }, {\n      name: \"Mountain Climbers\",\n      sets: 4,\n      reps: 20,\n      weight: 0\n    }, {\n      name: \"Jump Squats\",\n      sets: 4,\n      reps: 12,\n      weight: 0\n    }],\n    \"Yoga\": [{\n      name: \"Sun Salutation\",\n      sets: 3,\n      reps: 1,\n      weight: 0\n    }, {\n      name: \"Warrior Poses\",\n      sets: 2,\n      reps: 1,\n      weight: 0\n    }],\n    \"Running\": [{\n      name: \"5K Run\",\n      sets: 1,\n      reps: 1,\n      weight: 0\n    }],\n    \"Swimming\": [{\n      name: \"Freestyle\",\n      sets: 4,\n      reps: 25,\n      weight: 0\n    }, {\n      name: \"Backstroke\",\n      sets: 2,\n      reps: 20,\n      weight: 0\n    }],\n    \"Cycling\": [{\n      name: \"Stationary Bike\",\n      sets: 1,\n      reps: 45,\n      weight: 0\n    }]\n  };\n  return exerciseMap[workoutType] || exerciseMap[\"Strength Training\"];\n};\n\n// Generate meal history\nconst generateMealHistory = days => {\n  const meals = [];\n  const mealTypes = [\"breakfast\", \"lunch\", \"dinner\", \"snack\"];\n  const foodItems = [{\n    name: \"Oatmeal\",\n    calories: 150,\n    protein: 5,\n    carbs: 27,\n    fat: 3\n  }, {\n    name: \"Banana\",\n    calories: 105,\n    protein: 1,\n    carbs: 27,\n    fat: 0\n  }, {\n    name: \"Chicken Breast\",\n    calories: 165,\n    protein: 31,\n    carbs: 0,\n    fat: 3.6\n  }, {\n    name: \"Brown Rice\",\n    calories: 112,\n    protein: 2.6,\n    carbs: 22,\n    fat: 0.9\n  }, {\n    name: \"Broccoli\",\n    calories: 55,\n    protein: 3.7,\n    carbs: 11,\n    fat: 0.6\n  }, {\n    name: \"Greek Yogurt\",\n    calories: 100,\n    protein: 17,\n    carbs: 6,\n    fat: 0\n  }, {\n    name: \"Almonds\",\n    calories: 164,\n    protein: 6,\n    carbs: 6,\n    fat: 14\n  }, {\n    name: \"Salmon\",\n    calories: 206,\n    protein: 22,\n    carbs: 0,\n    fat: 12\n  }, {\n    name: \"Sweet Potato\",\n    calories: 86,\n    protein: 1.6,\n    carbs: 20,\n    fat: 0.1\n  }, {\n    name: \"Eggs\",\n    calories: 155,\n    protein: 13,\n    carbs: 1.1,\n    fat: 11\n  }];\n  for (let i = 0; i < days; i++) {\n    const date = new Date();\n    date.setDate(date.getDate() - i);\n    mealTypes.forEach(mealType => {\n      if (Math.random() > 0.2) {\n        // 80% chance of having each meal\n        const numItems = Math.floor(Math.random() * 3) + 1; // 1-3 food items\n        const selectedFoods = [];\n        for (let j = 0; j < numItems; j++) {\n          const food = foodItems[Math.floor(Math.random() * foodItems.length)];\n          const quantity = Math.random() * 2 + 0.5; // 0.5-2.5 servings\n\n          selectedFoods.push({\n            name: food.name,\n            quantity: quantity,\n            calories: Math.round(food.calories * quantity),\n            protein: Math.round(food.protein * quantity * 10) / 10,\n            carbs: Math.round(food.carbs * quantity * 10) / 10,\n            fat: Math.round(food.fat * quantity * 10) / 10\n          });\n        }\n        const totalCalories = selectedFoods.reduce((sum, item) => sum + item.calories, 0);\n        const totalProtein = selectedFoods.reduce((sum, item) => sum + item.protein, 0);\n        const totalCarbs = selectedFoods.reduce((sum, item) => sum + item.carbs, 0);\n        const totalFat = selectedFoods.reduce((sum, item) => sum + item.fat, 0);\n        meals.push({\n          id: `meal_${i}_${mealType}`,\n          date: date.toISOString().split('T')[0],\n          mealType: mealType,\n          foodItems: selectedFoods,\n          totalCalories: Math.round(totalCalories),\n          totalProtein: Math.round(totalProtein * 10) / 10,\n          totalCarbs: Math.round(totalCarbs * 10) / 10,\n          totalFat: Math.round(totalFat * 10) / 10\n        });\n      }\n    });\n  }\n  return meals.sort((a, b) => new Date(b.date) - new Date(a.date));\n};\n\n// Initialize sample data in localStorage\nexport const initializeSampleData = (userProfile = {}) => {\n  const sampleData = generateSampleUserData(userProfile);\n\n  // Save user profile data\n  localStorage.setItem('fitnessTrackerData', JSON.stringify({\n    name: sampleData.name,\n    age: sampleData.age,\n    gender: sampleData.gender,\n    height: sampleData.height,\n    weight: sampleData.weight,\n    activityLevel: sampleData.activityLevel,\n    goal: sampleData.goal,\n    weeklyChange: sampleData.weeklyChange,\n    targetWeight: sampleData.targetWeight,\n    workoutsThisWeek: sampleData.workoutsThisWeek,\n    totalWorkouts: sampleData.totalWorkouts,\n    caloriesToday: sampleData.caloriesToday,\n    streakDays: sampleData.streakDays\n  }));\n\n  // Save historical data\n  localStorage.setItem('weightEntries', JSON.stringify(sampleData.weightEntries));\n  localStorage.setItem('workouts', JSON.stringify(sampleData.workoutHistory));\n  localStorage.setItem('meals', JSON.stringify(sampleData.mealHistory));\n  console.log('Sample data initialized successfully!');\n  return sampleData;\n};\n\n// Check if data exists, if not initialize sample data\nexport const ensureDataExists = (userProfile = {}) => {\n  const existingData = localStorage.getItem('fitnessTrackerData');\n  if (!existingData || existingData === '{}') {\n    return initializeSampleData(userProfile);\n  }\n  return JSON.parse(existingData);\n};","map":{"version":3,"names":["generateSampleUserData","userProfile","name","age","gender","height","weight","activityLevel","goal","weeklyChange","targetWeight","workoutsThisWeek","Math","floor","random","totalWorkouts","caloriesToday","streakDays","weightEntries","generateWeightEntries","workoutHistory","generateWorkoutHistory","mealHistory","generateMealHistory","toString","lastUpdated","Date","toISOString","createdAt","now","startingWeight","days","entries","currentWeight","i","date","setDate","getDate","variation","max","min","push","id","split","round","notes","workouts","workoutTypes","workoutType","length","duration","type","caloriesBurned","exercises","generateExercises","sort","a","b","exerciseMap","sets","reps","meals","mealTypes","foodItems","calories","protein","carbs","fat","forEach","mealType","numItems","selectedFoods","j","food","quantity","totalCalories","reduce","sum","item","totalProtein","totalCarbs","totalFat","initializeSampleData","sampleData","localStorage","setItem","JSON","stringify","console","log","ensureDataExists","existingData","getItem","parse"],"sources":["C:/Users/gowth_tq3ir2j/OneDrive/Documents/project 3rd year/one credit/Fitness Tracker/frontend/src/utils/sampleDataGenerator.js"],"sourcesContent":["// Sample Data Generator for Fitness Tracker\n// This utility generates realistic sample data for demonstration purposes\n\nexport const generateSampleUserData = (userProfile = {}) => {\n  const {\n    name = \"Gowthammm\",\n    age = 25,\n    gender = \"male\",\n    height = 175, // cm\n    weight = 70, // kg\n    activityLevel = \"moderately_active\",\n    goal = \"weight_loss\",\n    weeklyChange = 0.5\n  } = userProfile;\n\n  // Calculate target weight (assuming weight loss goal)\n  const targetWeight = goal === \"weight_loss\" ? weight - 5 : weight + 5;\n\n  // Generate realistic workout data\n  const workoutsThisWeek = Math.floor(Math.random() * 4) + 3; // 3-6 workouts\n  const totalWorkouts = Math.floor(Math.random() * 50) + 20; // 20-70 total workouts\n\n  // Generate calorie data\n  const caloriesToday = Math.floor(Math.random() * 500) + 1500; // 1500-2000 calories\n  const streakDays = Math.floor(Math.random() * 30) + 5; // 5-35 day streak\n\n  // Generate weight entries for the last 30 days\n  const weightEntries = generateWeightEntries(weight, 30);\n\n  // Generate workout history\n  const workoutHistory = generateWorkoutHistory(totalWorkouts);\n\n  // Generate meal history\n  const mealHistory = generateMealHistory(7); // Last 7 days\n\n  return {\n    // User profile data\n    name,\n    age: age.toString(),\n    gender,\n    height: height.toString(),\n    weight: weight.toString(),\n    activityLevel,\n    goal,\n    weeklyChange: weeklyChange.toString(),\n    targetWeight: targetWeight.toString(),\n    \n    // Activity data\n    workoutsThisWeek: workoutsThisWeek.toString(),\n    totalWorkouts: totalWorkouts.toString(),\n    caloriesToday: caloriesToday.toString(),\n    streakDays: streakDays.toString(),\n\n    // Historical data\n    weightEntries,\n    workoutHistory,\n    mealHistory,\n\n    // Timestamps\n    lastUpdated: new Date().toISOString(),\n    createdAt: new Date(Date.now() - 30 * 24 * 60 * 60 * 1000).toISOString() // 30 days ago\n  };\n};\n\n// Generate realistic weight entries over time\nconst generateWeightEntries = (startingWeight, days) => {\n  const entries = [];\n  let currentWeight = startingWeight;\n  \n  for (let i = days; i >= 0; i--) {\n    const date = new Date();\n    date.setDate(date.getDate() - i);\n    \n    // Small random variation in weight (Â±0.5kg)\n    const variation = (Math.random() - 0.5) * 1;\n    currentWeight = Math.max(65, Math.min(75, currentWeight + variation));\n    \n    entries.push({\n      id: `weight_${i}`,\n      date: date.toISOString().split('T')[0],\n      weight: Math.round(currentWeight * 10) / 10,\n      notes: i % 7 === 0 ? \"Weekly weigh-in\" : \"\"\n    });\n  }\n  \n  return entries;\n};\n\n// Generate workout history\nconst generateWorkoutHistory = (totalWorkouts) => {\n  const workouts = [];\n  const workoutTypes = [\n    \"Strength Training\",\n    \"Cardio\",\n    \"HIIT\",\n    \"Yoga\",\n    \"Running\",\n    \"Swimming\",\n    \"Cycling\"\n  ];\n  \n  for (let i = 0; i < totalWorkouts; i++) {\n    const date = new Date();\n    date.setDate(date.getDate() - Math.floor(Math.random() * 30));\n    \n    const workoutType = workoutTypes[Math.floor(Math.random() * workoutTypes.length)];\n    const duration = Math.floor(Math.random() * 60) + 30; // 30-90 minutes\n    \n    workouts.push({\n      id: `workout_${i}`,\n      date: date.toISOString().split('T')[0],\n      type: workoutType,\n      duration: duration,\n      caloriesBurned: Math.floor(duration * 8 + Math.random() * 200),\n      exercises: generateExercises(workoutType)\n    });\n  }\n  \n  return workouts.sort((a, b) => new Date(b.date) - new Date(a.date));\n};\n\n// Generate exercises for each workout\nconst generateExercises = (workoutType) => {\n  const exerciseMap = {\n    \"Strength Training\": [\n      { name: \"Bench Press\", sets: 3, reps: 10, weight: 60 },\n      { name: \"Squats\", sets: 3, reps: 12, weight: 80 },\n      { name: \"Deadlifts\", sets: 3, reps: 8, weight: 100 }\n    ],\n    \"Cardio\": [\n      { name: \"Treadmill Running\", sets: 1, reps: 30, weight: 0 },\n      { name: \"Elliptical\", sets: 1, reps: 20, weight: 0 }\n    ],\n    \"HIIT\": [\n      { name: \"Burpees\", sets: 4, reps: 15, weight: 0 },\n      { name: \"Mountain Climbers\", sets: 4, reps: 20, weight: 0 },\n      { name: \"Jump Squats\", sets: 4, reps: 12, weight: 0 }\n    ],\n    \"Yoga\": [\n      { name: \"Sun Salutation\", sets: 3, reps: 1, weight: 0 },\n      { name: \"Warrior Poses\", sets: 2, reps: 1, weight: 0 }\n    ],\n    \"Running\": [\n      { name: \"5K Run\", sets: 1, reps: 1, weight: 0 }\n    ],\n    \"Swimming\": [\n      { name: \"Freestyle\", sets: 4, reps: 25, weight: 0 },\n      { name: \"Backstroke\", sets: 2, reps: 20, weight: 0 }\n    ],\n    \"Cycling\": [\n      { name: \"Stationary Bike\", sets: 1, reps: 45, weight: 0 }\n    ]\n  };\n  \n  return exerciseMap[workoutType] || exerciseMap[\"Strength Training\"];\n};\n\n// Generate meal history\nconst generateMealHistory = (days) => {\n  const meals = [];\n  const mealTypes = [\"breakfast\", \"lunch\", \"dinner\", \"snack\"];\n  const foodItems = [\n    { name: \"Oatmeal\", calories: 150, protein: 5, carbs: 27, fat: 3 },\n    { name: \"Banana\", calories: 105, protein: 1, carbs: 27, fat: 0 },\n    { name: \"Chicken Breast\", calories: 165, protein: 31, carbs: 0, fat: 3.6 },\n    { name: \"Brown Rice\", calories: 112, protein: 2.6, carbs: 22, fat: 0.9 },\n    { name: \"Broccoli\", calories: 55, protein: 3.7, carbs: 11, fat: 0.6 },\n    { name: \"Greek Yogurt\", calories: 100, protein: 17, carbs: 6, fat: 0 },\n    { name: \"Almonds\", calories: 164, protein: 6, carbs: 6, fat: 14 },\n    { name: \"Salmon\", calories: 206, protein: 22, carbs: 0, fat: 12 },\n    { name: \"Sweet Potato\", calories: 86, protein: 1.6, carbs: 20, fat: 0.1 },\n    { name: \"Eggs\", calories: 155, protein: 13, carbs: 1.1, fat: 11 }\n  ];\n  \n  for (let i = 0; i < days; i++) {\n    const date = new Date();\n    date.setDate(date.getDate() - i);\n    \n    mealTypes.forEach(mealType => {\n      if (Math.random() > 0.2) { // 80% chance of having each meal\n        const numItems = Math.floor(Math.random() * 3) + 1; // 1-3 food items\n        const selectedFoods = [];\n        \n        for (let j = 0; j < numItems; j++) {\n          const food = foodItems[Math.floor(Math.random() * foodItems.length)];\n          const quantity = Math.random() * 2 + 0.5; // 0.5-2.5 servings\n          \n          selectedFoods.push({\n            name: food.name,\n            quantity: quantity,\n            calories: Math.round(food.calories * quantity),\n            protein: Math.round(food.protein * quantity * 10) / 10,\n            carbs: Math.round(food.carbs * quantity * 10) / 10,\n            fat: Math.round(food.fat * quantity * 10) / 10\n          });\n        }\n        \n        const totalCalories = selectedFoods.reduce((sum, item) => sum + item.calories, 0);\n        const totalProtein = selectedFoods.reduce((sum, item) => sum + item.protein, 0);\n        const totalCarbs = selectedFoods.reduce((sum, item) => sum + item.carbs, 0);\n        const totalFat = selectedFoods.reduce((sum, item) => sum + item.fat, 0);\n        \n        meals.push({\n          id: `meal_${i}_${mealType}`,\n          date: date.toISOString().split('T')[0],\n          mealType: mealType,\n          foodItems: selectedFoods,\n          totalCalories: Math.round(totalCalories),\n          totalProtein: Math.round(totalProtein * 10) / 10,\n          totalCarbs: Math.round(totalCarbs * 10) / 10,\n          totalFat: Math.round(totalFat * 10) / 10\n        });\n      }\n    });\n  }\n  \n  return meals.sort((a, b) => new Date(b.date) - new Date(a.date));\n};\n\n// Initialize sample data in localStorage\nexport const initializeSampleData = (userProfile = {}) => {\n  const sampleData = generateSampleUserData(userProfile);\n  \n  // Save user profile data\n  localStorage.setItem('fitnessTrackerData', JSON.stringify({\n    name: sampleData.name,\n    age: sampleData.age,\n    gender: sampleData.gender,\n    height: sampleData.height,\n    weight: sampleData.weight,\n    activityLevel: sampleData.activityLevel,\n    goal: sampleData.goal,\n    weeklyChange: sampleData.weeklyChange,\n    targetWeight: sampleData.targetWeight,\n    workoutsThisWeek: sampleData.workoutsThisWeek,\n    totalWorkouts: sampleData.totalWorkouts,\n    caloriesToday: sampleData.caloriesToday,\n    streakDays: sampleData.streakDays\n  }));\n  \n  // Save historical data\n  localStorage.setItem('weightEntries', JSON.stringify(sampleData.weightEntries));\n  localStorage.setItem('workouts', JSON.stringify(sampleData.workoutHistory));\n  localStorage.setItem('meals', JSON.stringify(sampleData.mealHistory));\n  \n  console.log('Sample data initialized successfully!');\n  return sampleData;\n};\n\n// Check if data exists, if not initialize sample data\nexport const ensureDataExists = (userProfile = {}) => {\n  const existingData = localStorage.getItem('fitnessTrackerData');\n  if (!existingData || existingData === '{}') {\n    return initializeSampleData(userProfile);\n  }\n  return JSON.parse(existingData);\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}