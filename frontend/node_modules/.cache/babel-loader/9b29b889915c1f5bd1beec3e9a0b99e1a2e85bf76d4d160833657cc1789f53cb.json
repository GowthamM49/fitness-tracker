{"ast":null,"code":"// Backend Status Checker\n// This utility helps check if the backend API is available\n\nimport api from '../services/api';\nexport const checkBackendStatus = async () => {\n  try {\n    // Try to make a simple request to check if backend is available\n    await api.get('/health');\n    return {\n      available: true,\n      message: 'Backend is available'\n    };\n  } catch (error) {\n    var _error$response;\n    if (error.code === 'ERR_NETWORK' || ((_error$response = error.response) === null || _error$response === void 0 ? void 0 : _error$response.status) >= 500) {\n      return {\n        available: false,\n        message: 'Backend is unavailable - using local storage',\n        error: error.message\n      };\n    }\n    return {\n      available: true,\n      message: 'Backend is available (authentication may be required)',\n      error: error.message\n    };\n  }\n};\nexport const getBackendStatusMessage = status => {\n  if (status.available) {\n    return {\n      severity: 'success',\n      message: '✅ Connected to database',\n      color: 'success'\n    };\n  } else {\n    return {\n      severity: 'warning',\n      message: '⚠️ Using local storage (backend unavailable)',\n      color: 'warning'\n    };\n  }\n};\n\n// Check backend status and update UI accordingly\nexport const updateBackendStatus = async setStatus => {\n  const status = await checkBackendStatus();\n  setStatus(getBackendStatusMessage(status));\n  return status;\n};","map":{"version":3,"names":["api","checkBackendStatus","get","available","message","error","_error$response","code","response","status","getBackendStatusMessage","severity","color","updateBackendStatus","setStatus"],"sources":["C:/Users/gowth_tq3ir2j/OneDrive/Documents/project 3rd year/one credit/Fitness Tracker/frontend/src/utils/backendStatus.js"],"sourcesContent":["// Backend Status Checker\n// This utility helps check if the backend API is available\n\nimport api from '../services/api';\n\nexport const checkBackendStatus = async () => {\n  try {\n    // Try to make a simple request to check if backend is available\n    await api.get('/health');\n    return { available: true, message: 'Backend is available' };\n  } catch (error) {\n    if (error.code === 'ERR_NETWORK' || error.response?.status >= 500) {\n      return { \n        available: false, \n        message: 'Backend is unavailable - using local storage',\n        error: error.message \n      };\n    }\n    return { \n      available: true, \n      message: 'Backend is available (authentication may be required)',\n      error: error.message \n    };\n  }\n};\n\nexport const getBackendStatusMessage = (status) => {\n  if (status.available) {\n    return {\n      severity: 'success',\n      message: '✅ Connected to database',\n      color: 'success'\n    };\n  } else {\n    return {\n      severity: 'warning',\n      message: '⚠️ Using local storage (backend unavailable)',\n      color: 'warning'\n    };\n  }\n};\n\n// Check backend status and update UI accordingly\nexport const updateBackendStatus = async (setStatus) => {\n  const status = await checkBackendStatus();\n  setStatus(getBackendStatusMessage(status));\n  return status;\n};\n"],"mappings":"AAAA;AACA;;AAEA,OAAOA,GAAG,MAAM,iBAAiB;AAEjC,OAAO,MAAMC,kBAAkB,GAAG,MAAAA,CAAA,KAAY;EAC5C,IAAI;IACF;IACA,MAAMD,GAAG,CAACE,GAAG,CAAC,SAAS,CAAC;IACxB,OAAO;MAAEC,SAAS,EAAE,IAAI;MAAEC,OAAO,EAAE;IAAuB,CAAC;EAC7D,CAAC,CAAC,OAAOC,KAAK,EAAE;IAAA,IAAAC,eAAA;IACd,IAAID,KAAK,CAACE,IAAI,KAAK,aAAa,IAAI,EAAAD,eAAA,GAAAD,KAAK,CAACG,QAAQ,cAAAF,eAAA,uBAAdA,eAAA,CAAgBG,MAAM,KAAI,GAAG,EAAE;MACjE,OAAO;QACLN,SAAS,EAAE,KAAK;QAChBC,OAAO,EAAE,8CAA8C;QACvDC,KAAK,EAAEA,KAAK,CAACD;MACf,CAAC;IACH;IACA,OAAO;MACLD,SAAS,EAAE,IAAI;MACfC,OAAO,EAAE,uDAAuD;MAChEC,KAAK,EAAEA,KAAK,CAACD;IACf,CAAC;EACH;AACF,CAAC;AAED,OAAO,MAAMM,uBAAuB,GAAID,MAAM,IAAK;EACjD,IAAIA,MAAM,CAACN,SAAS,EAAE;IACpB,OAAO;MACLQ,QAAQ,EAAE,SAAS;MACnBP,OAAO,EAAE,yBAAyB;MAClCQ,KAAK,EAAE;IACT,CAAC;EACH,CAAC,MAAM;IACL,OAAO;MACLD,QAAQ,EAAE,SAAS;MACnBP,OAAO,EAAE,8CAA8C;MACvDQ,KAAK,EAAE;IACT,CAAC;EACH;AACF,CAAC;;AAED;AACA,OAAO,MAAMC,mBAAmB,GAAG,MAAOC,SAAS,IAAK;EACtD,MAAML,MAAM,GAAG,MAAMR,kBAAkB,CAAC,CAAC;EACzCa,SAAS,CAACJ,uBAAuB,CAACD,MAAM,CAAC,CAAC;EAC1C,OAAOA,MAAM;AACf,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}