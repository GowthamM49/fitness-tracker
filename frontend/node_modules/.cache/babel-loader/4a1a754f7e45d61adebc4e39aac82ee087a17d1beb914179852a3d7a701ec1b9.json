{"ast":null,"code":"// Mock API service for frontend-only development\n// This simulates backend responses without requiring a real server\n\nconst MOCK_DELAY = 500; // Simulate network delay\n\n// Mock user data\nlet mockUser = {\n  id: 1,\n  name: 'GOWTHAMM',\n  email: 'gowtham@example.com',\n  phone: '+1 234 567 8900',\n  location: 'New York, NY',\n  bio: 'Fitness enthusiast and health advocate',\n  age: 25,\n  gender: 'male',\n  height: 175,\n  weight: 70,\n  fitnessGoal: 'weight_loss',\n  profilePhoto: null,\n  settings: {\n    theme: 'dark',\n    language: 'en',\n    units: 'metric'\n  }\n};\n\n// Mock notifications\nlet mockNotifications = [{\n  id: 1,\n  type: 'achievement',\n  title: 'Workout Complete!',\n  message: 'Great job completing your morning workout',\n  time: '2 hours ago',\n  read: false,\n  icon: '🏋️'\n}, {\n  id: 2,\n  type: 'reminder',\n  title: 'Water Intake Reminder',\n  message: \"Don't forget to drink water! You're 2 glasses behind today\",\n  time: '1 hour ago',\n  read: false,\n  icon: '💧'\n}];\n\n// Helper function to simulate API delay\nconst delay = ms => new Promise(resolve => setTimeout(resolve, ms));\n\n// Mock API responses\nexport const mockApi = {\n  // User profile endpoints\n  async getProfile() {\n    await delay(MOCK_DELAY);\n    return {\n      data: mockUser\n    };\n  },\n  async updateProfile(profileData) {\n    await delay(MOCK_DELAY);\n    mockUser = {\n      ...mockUser,\n      ...profileData\n    };\n    return {\n      data: mockUser\n    };\n  },\n  async updateSettings(settings) {\n    await delay(MOCK_DELAY);\n    mockUser.settings = {\n      ...mockUser.settings,\n      ...settings\n    };\n    return {\n      data: mockUser.settings\n    };\n  },\n  async updatePassword(passwordData) {\n    await delay(MOCK_DELAY);\n    // In a real app, this would validate the current password\n    if (!passwordData.currentPassword) {\n      throw new Error('Current password is required');\n    }\n    return {\n      data: {\n        message: 'Password updated successfully'\n      }\n    };\n  },\n  async deleteAccount() {\n    await delay(MOCK_DELAY);\n    return {\n      data: {\n        message: 'Account deleted successfully'\n      }\n    };\n  },\n  // Notifications endpoints\n  async getNotifications() {\n    await delay(MOCK_DELAY);\n    return {\n      data: mockNotifications\n    };\n  },\n  async markNotificationAsRead(notificationId) {\n    await delay(MOCK_DELAY);\n    const notification = mockNotifications.find(n => n.id === notificationId);\n    if (notification) {\n      notification.read = true;\n    }\n    return {\n      data: {\n        message: 'Notification marked as read'\n      }\n    };\n  },\n  async markAllNotificationsAsRead() {\n    await delay(MOCK_DELAY);\n    mockNotifications.forEach(n => n.read = true);\n    return {\n      data: {\n        message: 'All notifications marked as read'\n      }\n    };\n  },\n  // Progress tracking endpoints\n  async getProgress() {\n    await delay(MOCK_DELAY);\n    return {\n      data: []\n    };\n  },\n  async addProgressEntry(entry) {\n    await delay(MOCK_DELAY);\n    return {\n      data: {\n        ...entry,\n        id: Date.now()\n      }\n    };\n  },\n  // Workout endpoints\n  async getWorkouts() {\n    await delay(MOCK_DELAY);\n    return {\n      data: []\n    };\n  },\n  async createWorkout(workout) {\n    await delay(MOCK_DELAY);\n    return {\n      data: {\n        ...workout,\n        id: Date.now()\n      }\n    };\n  },\n  // Diet endpoints\n  async getMeals() {\n    await delay(MOCK_DELAY);\n    return {\n      data: []\n    };\n  },\n  async addMeal(meal) {\n    await delay(MOCK_DELAY);\n    return {\n      data: {\n        ...meal,\n        id: Date.now()\n      }\n    };\n  }\n};\nexport default mockApi;","map":{"version":3,"names":["MOCK_DELAY","mockUser","id","name","email","phone","location","bio","age","gender","height","weight","fitnessGoal","profilePhoto","settings","theme","language","units","mockNotifications","type","title","message","time","read","icon","delay","ms","Promise","resolve","setTimeout","mockApi","getProfile","data","updateProfile","profileData","updateSettings","updatePassword","passwordData","currentPassword","Error","deleteAccount","getNotifications","markNotificationAsRead","notificationId","notification","find","n","markAllNotificationsAsRead","forEach","getProgress","addProgressEntry","entry","Date","now","getWorkouts","createWorkout","workout","getMeals","addMeal","meal"],"sources":["C:/Users/gowth_tq3ir2j/OneDrive/Documents/project 3rd year/one credit/Fitness Tracker/src/services/mockApi.js"],"sourcesContent":["// Mock API service for frontend-only development\n// This simulates backend responses without requiring a real server\n\nconst MOCK_DELAY = 500; // Simulate network delay\n\n// Mock user data\nlet mockUser = {\n  id: 1,\n  name: 'GOWTHAMM',\n  email: 'gowtham@example.com',\n  phone: '+1 234 567 8900',\n  location: 'New York, NY',\n  bio: 'Fitness enthusiast and health advocate',\n  age: 25,\n  gender: 'male',\n  height: 175,\n  weight: 70,\n  fitnessGoal: 'weight_loss',\n  profilePhoto: null,\n  settings: {\n    theme: 'dark',\n    language: 'en',\n    units: 'metric'\n  }\n};\n\n// Mock notifications\nlet mockNotifications = [\n  {\n    id: 1,\n    type: 'achievement',\n    title: 'Workout Complete!',\n    message: 'Great job completing your morning workout',\n    time: '2 hours ago',\n    read: false,\n    icon: '🏋️'\n  },\n  {\n    id: 2,\n    type: 'reminder',\n    title: 'Water Intake Reminder',\n    message: \"Don't forget to drink water! You're 2 glasses behind today\",\n    time: '1 hour ago',\n    read: false,\n    icon: '💧'\n  }\n];\n\n// Helper function to simulate API delay\nconst delay = (ms) => new Promise(resolve => setTimeout(resolve, ms));\n\n// Mock API responses\nexport const mockApi = {\n  // User profile endpoints\n  async getProfile() {\n    await delay(MOCK_DELAY);\n    return { data: mockUser };\n  },\n\n  async updateProfile(profileData) {\n    await delay(MOCK_DELAY);\n    mockUser = { ...mockUser, ...profileData };\n    return { data: mockUser };\n  },\n\n  async updateSettings(settings) {\n    await delay(MOCK_DELAY);\n    mockUser.settings = { ...mockUser.settings, ...settings };\n    return { data: mockUser.settings };\n  },\n\n  async updatePassword(passwordData) {\n    await delay(MOCK_DELAY);\n    // In a real app, this would validate the current password\n    if (!passwordData.currentPassword) {\n      throw new Error('Current password is required');\n    }\n    return { data: { message: 'Password updated successfully' } };\n  },\n\n  async deleteAccount() {\n    await delay(MOCK_DELAY);\n    return { data: { message: 'Account deleted successfully' } };\n  },\n\n  // Notifications endpoints\n  async getNotifications() {\n    await delay(MOCK_DELAY);\n    return { data: mockNotifications };\n  },\n\n  async markNotificationAsRead(notificationId) {\n    await delay(MOCK_DELAY);\n    const notification = mockNotifications.find(n => n.id === notificationId);\n    if (notification) {\n      notification.read = true;\n    }\n    return { data: { message: 'Notification marked as read' } };\n  },\n\n  async markAllNotificationsAsRead() {\n    await delay(MOCK_DELAY);\n    mockNotifications.forEach(n => n.read = true);\n    return { data: { message: 'All notifications marked as read' } };\n  },\n\n  // Progress tracking endpoints\n  async getProgress() {\n    await delay(MOCK_DELAY);\n    return { data: [] };\n  },\n\n  async addProgressEntry(entry) {\n    await delay(MOCK_DELAY);\n    return { data: { ...entry, id: Date.now() } };\n  },\n\n  // Workout endpoints\n  async getWorkouts() {\n    await delay(MOCK_DELAY);\n    return { data: [] };\n  },\n\n  async createWorkout(workout) {\n    await delay(MOCK_DELAY);\n    return { data: { ...workout, id: Date.now() } };\n  },\n\n  // Diet endpoints\n  async getMeals() {\n    await delay(MOCK_DELAY);\n    return { data: [] };\n  },\n\n  async addMeal(meal) {\n    await delay(MOCK_DELAY);\n    return { data: { ...meal, id: Date.now() } };\n  }\n};\n\nexport default mockApi;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}