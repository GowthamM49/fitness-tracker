{"ast":null,"code":"// Fitness calculation utilities for user input\n/**\n * Calculate BMI (Body Mass Index)\n * @param {number} weight - Weight in kg\n * @param {number} height - Height in meters\n * @returns {object} BMI value and category\n */export const calculateBMI=(weight,height)=>{if(weight<=0||height<=0){return{bmi:0,category:'Invalid',color:'error'};}const bmi=weight/(height*height);let category,color;if(bmi<18.5){category='Underweight';color='warning';}else if(bmi>=18.5&&bmi<25){category='Normal';color='success';}else if(bmi>=25&&bmi<30){category='Overweight';color='warning';}else{category='Obese';color='error';}return{bmi:bmi.toFixed(1),category,color};};/**\n * Calculate BMR (Basal Metabolic Rate) using Mifflin-St Jeor Equation\n * @param {number} weight - Weight in kg\n * @param {number} height - Height in cm\n * @param {number} age - Age in years\n * @param {string} gender - 'male' or 'female'\n * @returns {number} BMR in calories\n */export const calculateBMR=(weight,height,age,gender)=>{if(weight<=0||height<=0||age<=0){return 0;}let bmr;if(gender.toLowerCase()==='male'){bmr=10*weight+6.25*height-5*age+5;}else{bmr=10*weight+6.25*height-5*age-161;}return Math.round(bmr);};/**\n * Calculate TDEE (Total Daily Energy Expenditure)\n * @param {number} bmr - BMR value\n * @param {string} activityLevel - Activity level description\n * @returns {number} TDEE in calories\n */export const calculateTDEE=(bmr,activityLevel)=>{const activityMultipliers={'sedentary':1.2,// Little or no exercise\n'light':1.375,// Light exercise 1-3 days/week\n'moderate':1.55,// Moderate exercise 3-5 days/week\n'active':1.725,// Hard exercise 6-7 days/week\n'very_active':1.9// Very hard exercise, physical job\n};const multiplier=activityMultipliers[activityLevel.toLowerCase()]||1.2;return Math.round(bmr*multiplier);};/**\n * Calculate weight loss/gain calorie target\n * @param {number} tdee - TDEE value\n * @param {string} goal - 'lose', 'maintain', or 'gain'\n * @param {number} weeklyChange - Weekly weight change goal in kg\n * @returns {object} Calorie target and weekly change\n */export const calculateCalorieTarget=function(tdee,goal){let weeklyChange=arguments.length>2&&arguments[2]!==undefined?arguments[2]:0.5;let targetCalories;switch(goal.toLowerCase()){case'lose':// 1 kg = 7700 calories, so weeklyChange kg = weeklyChange * 7700 calories\nconst weeklyDeficit=weeklyChange*7700;const dailyDeficit=weeklyDeficit/7;targetCalories=tdee-dailyDeficit;break;case'gain':const weeklySurplus=weeklyChange*7700;const dailySurplus=weeklySurplus/7;targetCalories=tdee+dailySurplus;break;default:// maintain\ntargetCalories=tdee;weeklyChange=0;}return{targetCalories:Math.round(targetCalories),weeklyChange:weeklyChange,goal:goal};};/**\n * Calculate protein needs based on weight and activity\n * @param {number} weight - Weight in kg\n * @param {string} activityLevel - Activity level\n * @returns {object} Protein needs in grams and calories\n */export const calculateProteinNeeds=(weight,activityLevel)=>{let proteinPerKg;switch(activityLevel.toLowerCase()){case'sedentary':proteinPerKg=0.8;break;case'light':proteinPerKg=1.0;break;case'moderate':proteinPerKg=1.2;break;case'active':proteinPerKg=1.4;break;case'very_active':proteinPerKg=1.6;break;default:proteinPerKg=1.0;}const proteinGrams=Math.round(weight*proteinPerKg);const proteinCalories=proteinGrams*4;// 4 calories per gram of protein\nreturn{proteinGrams,proteinCalories};};/**\n * Calculate workout calories burned\n * @param {string} activity - Type of activity\n * @param {number} duration - Duration in minutes\n * @param {number} weight - Weight in kg\n * @returns {number} Calories burned\n */export const calculateWorkoutCalories=(activity,duration,weight)=>{const activityMETs={'walking':3.5,'jogging':7.0,'running':11.5,'cycling':8.0,'swimming':6.0,'weightlifting':3.0,'yoga':2.5,'pilates':3.0,'dancing':4.5,'basketball':8.0,'soccer':7.0,'tennis':6.0};const met=activityMETs[activity.toLowerCase()]||3.0;const caloriesBurned=met*weight*duration/60;return Math.round(caloriesBurned);};/**\n * Calculate progress percentage\n * @param {number} current - Current value\n * @param {number} target - Target value\n * @param {string} type - 'weight_loss', 'weight_gain', or 'calorie'\n * @returns {object} Progress percentage and status\n */export const calculateProgress=function(current,target){let type=arguments.length>2&&arguments[2]!==undefined?arguments[2]:'weight_loss';if(target===0)return{percentage:0,status:'No target set'};let percentage,status;switch(type){case'weight_loss':// For weight loss, we want current to be less than target\nif(current<=target){percentage=100;status='Goal achieved!';}else{percentage=Math.max(0,Math.min(100,(current-target)/(current-target+1)*100));status='In progress';}break;case'weight_gain':// For weight gain, we want current to be more than target\nif(current>=target){percentage=100;status='Goal achieved!';}else{percentage=Math.max(0,Math.min(100,current/target*100));status='In progress';}break;case'calorie':// For calories, we want current to be close to target\npercentage=Math.max(0,Math.min(100,current/target*100));if(percentage>=90&&percentage<=110){status='On target';}else if(percentage<90){status='Under target';}else{status='Over target';}break;default:percentage=0;status='Unknown type';}return{percentage:Math.round(percentage),status};};/**\n * Calculate ideal weight range based on height and gender\n * @param {number} height - Height in cm\n * @param {string} gender - 'male' or 'female'\n * @returns {object} Min and max ideal weight in kg\n */export const calculateIdealWeightRange=(height,gender)=>{if(height<=0)return{min:0,max:0};const heightM=height/100;// Using BMI range 18.5-24.9 for healthy weight\nconst minWeight=18.5*heightM*heightM;const maxWeight=24.9*heightM*heightM;return{min:Math.round(minWeight),max:Math.round(maxWeight),height:heightM};};export default{calculateBMI,calculateBMR,calculateTDEE,calculateCalorieTarget,calculateProteinNeeds,calculateWorkoutCalories,calculateProgress,calculateIdealWeightRange};","map":{"version":3,"names":["calculateBMI","weight","height","bmi","category","color","toFixed","calculateBMR","age","gender","bmr","toLowerCase","Math","round","calculateTDEE","activityLevel","activityMultipliers","multiplier","calculateCalorieTarget","tdee","goal","weeklyChange","arguments","length","undefined","targetCalories","weeklyDeficit","dailyDeficit","weeklySurplus","dailySurplus","calculateProteinNeeds","proteinPerKg","proteinGrams","proteinCalories","calculateWorkoutCalories","activity","duration","activityMETs","met","caloriesBurned","calculateProgress","current","target","type","percentage","status","max","min","calculateIdealWeightRange","heightM","minWeight","maxWeight"],"sources":["C:/Users/gowth_tq3ir2j/OneDrive/Documents/project 3rd year/one credit/Fitness Tracker/frontend/src/utils/calculations.js"],"sourcesContent":["// Fitness calculation utilities for user input\n\n/**\n * Calculate BMI (Body Mass Index)\n * @param {number} weight - Weight in kg\n * @param {number} height - Height in meters\n * @returns {object} BMI value and category\n */\nexport const calculateBMI = (weight, height) => {\n  if (weight <= 0 || height <= 0) {\n    return { bmi: 0, category: 'Invalid', color: 'error' };\n  }\n  \n  const bmi = weight / (height * height);\n  \n  let category, color;\n  if (bmi < 18.5) {\n    category = 'Underweight';\n    color = 'warning';\n  } else if (bmi >= 18.5 && bmi < 25) {\n    category = 'Normal';\n    color = 'success';\n  } else if (bmi >= 25 && bmi < 30) {\n    category = 'Overweight';\n    color = 'warning';\n  } else {\n    category = 'Obese';\n    color = 'error';\n  }\n  \n  return { bmi: bmi.toFixed(1), category, color };\n};\n\n/**\n * Calculate BMR (Basal Metabolic Rate) using Mifflin-St Jeor Equation\n * @param {number} weight - Weight in kg\n * @param {number} height - Height in cm\n * @param {number} age - Age in years\n * @param {string} gender - 'male' or 'female'\n * @returns {number} BMR in calories\n */\nexport const calculateBMR = (weight, height, age, gender) => {\n  if (weight <= 0 || height <= 0 || age <= 0) {\n    return 0;\n  }\n  \n  let bmr;\n  if (gender.toLowerCase() === 'male') {\n    bmr = (10 * weight) + (6.25 * height) - (5 * age) + 5;\n  } else {\n    bmr = (10 * weight) + (6.25 * height) - (5 * age) - 161;\n  }\n  \n  return Math.round(bmr);\n};\n\n/**\n * Calculate TDEE (Total Daily Energy Expenditure)\n * @param {number} bmr - BMR value\n * @param {string} activityLevel - Activity level description\n * @returns {number} TDEE in calories\n */\nexport const calculateTDEE = (bmr, activityLevel) => {\n  const activityMultipliers = {\n    'sedentary': 1.2,        // Little or no exercise\n    'light': 1.375,          // Light exercise 1-3 days/week\n    'moderate': 1.55,        // Moderate exercise 3-5 days/week\n    'active': 1.725,         // Hard exercise 6-7 days/week\n    'very_active': 1.9       // Very hard exercise, physical job\n  };\n  \n  const multiplier = activityMultipliers[activityLevel.toLowerCase()] || 1.2;\n  return Math.round(bmr * multiplier);\n};\n\n/**\n * Calculate weight loss/gain calorie target\n * @param {number} tdee - TDEE value\n * @param {string} goal - 'lose', 'maintain', or 'gain'\n * @param {number} weeklyChange - Weekly weight change goal in kg\n * @returns {object} Calorie target and weekly change\n */\nexport const calculateCalorieTarget = (tdee, goal, weeklyChange = 0.5) => {\n  let targetCalories;\n  \n  switch (goal.toLowerCase()) {\n    case 'lose':\n      // 1 kg = 7700 calories, so weeklyChange kg = weeklyChange * 7700 calories\n      const weeklyDeficit = weeklyChange * 7700;\n      const dailyDeficit = weeklyDeficit / 7;\n      targetCalories = tdee - dailyDeficit;\n      break;\n    case 'gain':\n      const weeklySurplus = weeklyChange * 7700;\n      const dailySurplus = weeklySurplus / 7;\n      targetCalories = tdee + dailySurplus;\n      break;\n    default: // maintain\n      targetCalories = tdee;\n      weeklyChange = 0;\n  }\n  \n  return {\n    targetCalories: Math.round(targetCalories),\n    weeklyChange: weeklyChange,\n    goal: goal\n  };\n};\n\n/**\n * Calculate protein needs based on weight and activity\n * @param {number} weight - Weight in kg\n * @param {string} activityLevel - Activity level\n * @returns {object} Protein needs in grams and calories\n */\nexport const calculateProteinNeeds = (weight, activityLevel) => {\n  let proteinPerKg;\n  \n  switch (activityLevel.toLowerCase()) {\n    case 'sedentary':\n      proteinPerKg = 0.8;\n      break;\n    case 'light':\n      proteinPerKg = 1.0;\n      break;\n    case 'moderate':\n      proteinPerKg = 1.2;\n      break;\n    case 'active':\n      proteinPerKg = 1.4;\n      break;\n    case 'very_active':\n      proteinPerKg = 1.6;\n      break;\n    default:\n      proteinPerKg = 1.0;\n  }\n  \n  const proteinGrams = Math.round(weight * proteinPerKg);\n  const proteinCalories = proteinGrams * 4; // 4 calories per gram of protein\n  \n  return { proteinGrams, proteinCalories };\n};\n\n/**\n * Calculate workout calories burned\n * @param {string} activity - Type of activity\n * @param {number} duration - Duration in minutes\n * @param {number} weight - Weight in kg\n * @returns {number} Calories burned\n */\nexport const calculateWorkoutCalories = (activity, duration, weight) => {\n  const activityMETs = {\n    'walking': 3.5,\n    'jogging': 7.0,\n    'running': 11.5,\n    'cycling': 8.0,\n    'swimming': 6.0,\n    'weightlifting': 3.0,\n    'yoga': 2.5,\n    'pilates': 3.0,\n    'dancing': 4.5,\n    'basketball': 8.0,\n    'soccer': 7.0,\n    'tennis': 6.0\n  };\n  \n  const met = activityMETs[activity.toLowerCase()] || 3.0;\n  const caloriesBurned = (met * weight * duration) / 60;\n  \n  return Math.round(caloriesBurned);\n};\n\n/**\n * Calculate progress percentage\n * @param {number} current - Current value\n * @param {number} target - Target value\n * @param {string} type - 'weight_loss', 'weight_gain', or 'calorie'\n * @returns {object} Progress percentage and status\n */\nexport const calculateProgress = (current, target, type = 'weight_loss') => {\n  if (target === 0) return { percentage: 0, status: 'No target set' };\n  \n  let percentage, status;\n  \n  switch (type) {\n    case 'weight_loss':\n      // For weight loss, we want current to be less than target\n      if (current <= target) {\n        percentage = 100;\n        status = 'Goal achieved!';\n      } else {\n        percentage = Math.max(0, Math.min(100, ((current - target) / (current - target + 1)) * 100));\n        status = 'In progress';\n      }\n      break;\n    case 'weight_gain':\n      // For weight gain, we want current to be more than target\n      if (current >= target) {\n        percentage = 100;\n        status = 'Goal achieved!';\n      } else {\n        percentage = Math.max(0, Math.min(100, (current / target) * 100));\n        status = 'In progress';\n      }\n      break;\n    case 'calorie':\n      // For calories, we want current to be close to target\n      percentage = Math.max(0, Math.min(100, (current / target) * 100));\n      if (percentage >= 90 && percentage <= 110) {\n        status = 'On target';\n      } else if (percentage < 90) {\n        status = 'Under target';\n      } else {\n        status = 'Over target';\n      }\n      break;\n    default:\n      percentage = 0;\n      status = 'Unknown type';\n  }\n  \n  return { percentage: Math.round(percentage), status };\n};\n\n/**\n * Calculate ideal weight range based on height and gender\n * @param {number} height - Height in cm\n * @param {string} gender - 'male' or 'female'\n * @returns {object} Min and max ideal weight in kg\n */\nexport const calculateIdealWeightRange = (height, gender) => {\n  if (height <= 0) return { min: 0, max: 0 };\n  \n  const heightM = height / 100;\n  \n  // Using BMI range 18.5-24.9 for healthy weight\n  const minWeight = 18.5 * heightM * heightM;\n  const maxWeight = 24.9 * heightM * heightM;\n  \n  return {\n    min: Math.round(minWeight),\n    max: Math.round(maxWeight),\n    height: heightM\n  };\n};\n\nexport default {\n  calculateBMI,\n  calculateBMR,\n  calculateTDEE,\n  calculateCalorieTarget,\n  calculateProteinNeeds,\n  calculateWorkoutCalories,\n  calculateProgress,\n  calculateIdealWeightRange\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}