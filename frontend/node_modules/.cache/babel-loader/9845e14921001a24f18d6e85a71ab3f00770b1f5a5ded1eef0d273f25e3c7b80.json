{"ast":null,"code":"import api from'./api';export const authService={// Login user\nasync login(email,password){try{const response=await api.post('/auth/login',{email,password});return response.data;}catch(error){var _error$response,_error$response$data;throw new Error(((_error$response=error.response)===null||_error$response===void 0?void 0:(_error$response$data=_error$response.data)===null||_error$response$data===void 0?void 0:_error$response$data.message)||'Login failed');}},// Register user\nasync register(userData){try{const response=await api.post('/auth/register',userData);return response.data;}catch(error){var _error$response2,_error$response2$data;throw new Error(((_error$response2=error.response)===null||_error$response2===void 0?void 0:(_error$response2$data=_error$response2.data)===null||_error$response2$data===void 0?void 0:_error$response2$data.message)||'Registration failed');}},// Get current user\nasync getCurrentUser(){try{const response=await api.get('/auth/me');return response.data;}catch(error){var _error$response3,_error$response3$data;throw new Error(((_error$response3=error.response)===null||_error$response3===void 0?void 0:(_error$response3$data=_error$response3.data)===null||_error$response3$data===void 0?void 0:_error$response3$data.message)||'Failed to get user data');}},// Update user profile\nasync updateProfile(userData){try{const response=await api.put('/auth/profile',userData);return response.data;}catch(error){var _error$response4,_error$response4$data;throw new Error(((_error$response4=error.response)===null||_error$response4===void 0?void 0:(_error$response4$data=_error$response4.data)===null||_error$response4$data===void 0?void 0:_error$response4$data.message)||'Failed to update profile');}},// Change password\nasync changePassword(currentPassword,newPassword){try{const response=await api.put('/auth/change-password',{currentPassword,newPassword});return response.data;}catch(error){var _error$response5,_error$response5$data;throw new Error(((_error$response5=error.response)===null||_error$response5===void 0?void 0:(_error$response5$data=_error$response5.data)===null||_error$response5$data===void 0?void 0:_error$response5$data.message)||'Failed to change password');}},// Forgot password\nasync forgotPassword(email){try{const response=await api.post('/auth/forgot-password',{email});return response.data;}catch(error){var _error$response6,_error$response6$data;throw new Error(((_error$response6=error.response)===null||_error$response6===void 0?void 0:(_error$response6$data=_error$response6.data)===null||_error$response6$data===void 0?void 0:_error$response6$data.message)||'Failed to send reset email');}},// Reset password\nasync resetPassword(token,newPassword){try{const response=await api.post('/auth/reset-password',{token,newPassword});return response.data;}catch(error){var _error$response7,_error$response7$data;throw new Error(((_error$response7=error.response)===null||_error$response7===void 0?void 0:(_error$response7$data=_error$response7.data)===null||_error$response7$data===void 0?void 0:_error$response7$data.message)||'Failed to reset password');}}};","map":{"version":3,"names":["api","authService","login","email","password","response","post","data","error","_error$response","_error$response$data","Error","message","register","userData","_error$response2","_error$response2$data","getCurrentUser","get","_error$response3","_error$response3$data","updateProfile","put","_error$response4","_error$response4$data","changePassword","currentPassword","newPassword","_error$response5","_error$response5$data","forgotPassword","_error$response6","_error$response6$data","resetPassword","token","_error$response7","_error$response7$data"],"sources":["C:/Users/gowth_tq3ir2j/OneDrive/Documents/project 3rd year/one credit/Fitness Tracker/frontend/src/services/authService.js"],"sourcesContent":["import api from './api';\n\nexport const authService = {\n  // Login user\n  async login(email, password) {\n    try {\n      const response = await api.post('/auth/login', { email, password });\n      return response.data;\n    } catch (error) {\n      throw new Error(error.response?.data?.message || 'Login failed');\n    }\n  },\n\n  // Register user\n  async register(userData) {\n    try {\n      const response = await api.post('/auth/register', userData);\n      return response.data;\n    } catch (error) {\n      throw new Error(error.response?.data?.message || 'Registration failed');\n    }\n  },\n\n  // Get current user\n  async getCurrentUser() {\n    try {\n      const response = await api.get('/auth/me');\n      return response.data;\n    } catch (error) {\n      throw new Error(error.response?.data?.message || 'Failed to get user data');\n    }\n  },\n\n  // Update user profile\n  async updateProfile(userData) {\n    try {\n      const response = await api.put('/auth/profile', userData);\n      return response.data;\n    } catch (error) {\n      throw new Error(error.response?.data?.message || 'Failed to update profile');\n    }\n  },\n\n  // Change password\n  async changePassword(currentPassword, newPassword) {\n    try {\n      const response = await api.put('/auth/change-password', {\n        currentPassword,\n        newPassword\n      });\n      return response.data;\n    } catch (error) {\n      throw new Error(error.response?.data?.message || 'Failed to change password');\n    }\n  },\n\n  // Forgot password\n  async forgotPassword(email) {\n    try {\n      const response = await api.post('/auth/forgot-password', { email });\n      return response.data;\n    } catch (error) {\n      throw new Error(error.response?.data?.message || 'Failed to send reset email');\n    }\n  },\n\n  // Reset password\n  async resetPassword(token, newPassword) {\n    try {\n      const response = await api.post('/auth/reset-password', {\n        token,\n        newPassword\n      });\n      return response.data;\n    } catch (error) {\n      throw new Error(error.response?.data?.message || 'Failed to reset password');\n    }\n  }\n}; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}