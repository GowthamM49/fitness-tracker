{"ast":null,"code":"// Sample Data Generator for Fitness Tracker\n// This utility generates realistic sample data for demonstration purposes\nexport const generateSampleUserData=function(){let userProfile=arguments.length>0&&arguments[0]!==undefined?arguments[0]:{};const{name=\"Gowthammm\",age=25,gender=\"male\",height=175,// cm\nweight=70,// kg\nactivityLevel=\"moderately_active\",goal=\"weight_loss\",weeklyChange=0.5}=userProfile;// Calculate target weight (assuming weight loss goal)\nconst targetWeight=goal===\"weight_loss\"?weight-5:weight+5;// Generate realistic workout data\nconst workoutsThisWeek=Math.floor(Math.random()*4)+3;// 3-6 workouts\nconst totalWorkouts=Math.floor(Math.random()*50)+20;// 20-70 total workouts\n// Generate calorie data\nconst caloriesToday=Math.floor(Math.random()*500)+1500;// 1500-2000 calories\nconst streakDays=Math.floor(Math.random()*30)+5;// 5-35 day streak\n// Generate weight entries for the last 30 days\nconst weightEntries=generateWeightEntries(weight,30);// Generate workout history\nconst workoutHistory=generateWorkoutHistory(totalWorkouts);// Generate meal history\nconst mealHistory=generateMealHistory(7);// Last 7 days\nreturn{// User profile data\nname,age:age.toString(),gender,height:height.toString(),weight:weight.toString(),activityLevel,goal,weeklyChange:weeklyChange.toString(),targetWeight:targetWeight.toString(),// Activity data\nworkoutsThisWeek:workoutsThisWeek.toString(),totalWorkouts:totalWorkouts.toString(),caloriesToday:caloriesToday.toString(),streakDays:streakDays.toString(),// Historical data\nweightEntries,workoutHistory,mealHistory,// Timestamps\nlastUpdated:new Date().toISOString(),createdAt:new Date(Date.now()-30*24*60*60*1000).toISOString()// 30 days ago\n};};// Generate realistic weight entries over time\nconst generateWeightEntries=(startingWeight,days)=>{const entries=[];let currentWeight=startingWeight;for(let i=days;i>=0;i--){const date=new Date();date.setDate(date.getDate()-i);// Small random variation in weight (Â±0.5kg)\nconst variation=(Math.random()-0.5)*1;currentWeight=Math.max(65,Math.min(75,currentWeight+variation));entries.push({id:`weight_${i}`,date:date.toISOString().split('T')[0],weight:Math.round(currentWeight*10)/10,notes:i%7===0?\"Weekly weigh-in\":\"\"});}return entries;};// Generate workout history\nconst generateWorkoutHistory=totalWorkouts=>{const workouts=[];const workoutTypes=[\"Strength Training\",\"Cardio\",\"HIIT\",\"Yoga\",\"Running\",\"Swimming\",\"Cycling\"];for(let i=0;i<totalWorkouts;i++){const date=new Date();date.setDate(date.getDate()-Math.floor(Math.random()*30));const workoutType=workoutTypes[Math.floor(Math.random()*workoutTypes.length)];const duration=Math.floor(Math.random()*60)+30;// 30-90 minutes\nworkouts.push({id:`workout_${i}`,date:date.toISOString().split('T')[0],type:workoutType,duration:duration,caloriesBurned:Math.floor(duration*8+Math.random()*200),exercises:generateExercises(workoutType)});}return workouts.sort((a,b)=>new Date(b.date)-new Date(a.date));};// Generate exercises for each workout\nconst generateExercises=workoutType=>{const exerciseMap={\"Strength Training\":[{name:\"Bench Press\",sets:3,reps:10,weight:60},{name:\"Squats\",sets:3,reps:12,weight:80},{name:\"Deadlifts\",sets:3,reps:8,weight:100}],\"Cardio\":[{name:\"Treadmill Running\",sets:1,reps:30,weight:0},{name:\"Elliptical\",sets:1,reps:20,weight:0}],\"HIIT\":[{name:\"Burpees\",sets:4,reps:15,weight:0},{name:\"Mountain Climbers\",sets:4,reps:20,weight:0},{name:\"Jump Squats\",sets:4,reps:12,weight:0}],\"Yoga\":[{name:\"Sun Salutation\",sets:3,reps:1,weight:0},{name:\"Warrior Poses\",sets:2,reps:1,weight:0}],\"Running\":[{name:\"5K Run\",sets:1,reps:1,weight:0}],\"Swimming\":[{name:\"Freestyle\",sets:4,reps:25,weight:0},{name:\"Backstroke\",sets:2,reps:20,weight:0}],\"Cycling\":[{name:\"Stationary Bike\",sets:1,reps:45,weight:0}]};return exerciseMap[workoutType]||exerciseMap[\"Strength Training\"];};// Generate meal history\nconst generateMealHistory=days=>{const meals=[];const mealTypes=[\"breakfast\",\"lunch\",\"dinner\",\"snack\"];const foodItems=[{name:\"Oatmeal\",calories:150,protein:5,carbs:27,fat:3},{name:\"Banana\",calories:105,protein:1,carbs:27,fat:0},{name:\"Chicken Breast\",calories:165,protein:31,carbs:0,fat:3.6},{name:\"Brown Rice\",calories:112,protein:2.6,carbs:22,fat:0.9},{name:\"Broccoli\",calories:55,protein:3.7,carbs:11,fat:0.6},{name:\"Greek Yogurt\",calories:100,protein:17,carbs:6,fat:0},{name:\"Almonds\",calories:164,protein:6,carbs:6,fat:14},{name:\"Salmon\",calories:206,protein:22,carbs:0,fat:12},{name:\"Sweet Potato\",calories:86,protein:1.6,carbs:20,fat:0.1},{name:\"Eggs\",calories:155,protein:13,carbs:1.1,fat:11}];for(let i=0;i<days;i++){const date=new Date();date.setDate(date.getDate()-i);mealTypes.forEach(mealType=>{if(Math.random()>0.2){// 80% chance of having each meal\nconst numItems=Math.floor(Math.random()*3)+1;// 1-3 food items\nconst selectedFoods=[];for(let j=0;j<numItems;j++){const food=foodItems[Math.floor(Math.random()*foodItems.length)];const quantity=Math.random()*2+0.5;// 0.5-2.5 servings\nselectedFoods.push({name:food.name,quantity:quantity,calories:Math.round(food.calories*quantity),protein:Math.round(food.protein*quantity*10)/10,carbs:Math.round(food.carbs*quantity*10)/10,fat:Math.round(food.fat*quantity*10)/10});}const totalCalories=selectedFoods.reduce((sum,item)=>sum+item.calories,0);const totalProtein=selectedFoods.reduce((sum,item)=>sum+item.protein,0);const totalCarbs=selectedFoods.reduce((sum,item)=>sum+item.carbs,0);const totalFat=selectedFoods.reduce((sum,item)=>sum+item.fat,0);meals.push({id:`meal_${i}_${mealType}`,date:date.toISOString().split('T')[0],mealType:mealType,foodItems:selectedFoods,totalCalories:Math.round(totalCalories),totalProtein:Math.round(totalProtein*10)/10,totalCarbs:Math.round(totalCarbs*10)/10,totalFat:Math.round(totalFat*10)/10});}});}return meals.sort((a,b)=>new Date(b.date)-new Date(a.date));};// Initialize sample data in localStorage\nexport const initializeSampleData=function(){let userProfile=arguments.length>0&&arguments[0]!==undefined?arguments[0]:{};const sampleData=generateSampleUserData(userProfile);// Save user profile data\nlocalStorage.setItem('fitnessTrackerData',JSON.stringify({name:sampleData.name,age:sampleData.age,gender:sampleData.gender,height:sampleData.height,weight:sampleData.weight,activityLevel:sampleData.activityLevel,goal:sampleData.goal,weeklyChange:sampleData.weeklyChange,targetWeight:sampleData.targetWeight,workoutsThisWeek:sampleData.workoutsThisWeek,totalWorkouts:sampleData.totalWorkouts,caloriesToday:sampleData.caloriesToday,streakDays:sampleData.streakDays}));// Save historical data\nlocalStorage.setItem('weightEntries',JSON.stringify(sampleData.weightEntries));localStorage.setItem('workouts',JSON.stringify(sampleData.workoutHistory));localStorage.setItem('meals',JSON.stringify(sampleData.mealHistory));console.log('Sample data initialized successfully!');return sampleData;};// Check if data exists, if not initialize sample data\nexport const ensureDataExists=function(){let userProfile=arguments.length>0&&arguments[0]!==undefined?arguments[0]:{};const existingData=localStorage.getItem('fitnessTrackerData');if(!existingData||existingData==='{}'){return initializeSampleData(userProfile);}return JSON.parse(existingData);};","map":{"version":3,"names":["generateSampleUserData","userProfile","arguments","length","undefined","name","age","gender","height","weight","activityLevel","goal","weeklyChange","targetWeight","workoutsThisWeek","Math","floor","random","totalWorkouts","caloriesToday","streakDays","weightEntries","generateWeightEntries","workoutHistory","generateWorkoutHistory","mealHistory","generateMealHistory","toString","lastUpdated","Date","toISOString","createdAt","now","startingWeight","days","entries","currentWeight","i","date","setDate","getDate","variation","max","min","push","id","split","round","notes","workouts","workoutTypes","workoutType","duration","type","caloriesBurned","exercises","generateExercises","sort","a","b","exerciseMap","sets","reps","meals","mealTypes","foodItems","calories","protein","carbs","fat","forEach","mealType","numItems","selectedFoods","j","food","quantity","totalCalories","reduce","sum","item","totalProtein","totalCarbs","totalFat","initializeSampleData","sampleData","localStorage","setItem","JSON","stringify","console","log","ensureDataExists","existingData","getItem","parse"],"sources":["C:/Users/gowth_tq3ir2j/OneDrive/Documents/project 3rd year/one credit/Fitness Tracker/frontend/src/utils/sampleDataGenerator.js"],"sourcesContent":["// Sample Data Generator for Fitness Tracker\n// This utility generates realistic sample data for demonstration purposes\n\nexport const generateSampleUserData = (userProfile = {}) => {\n  const {\n    name = \"Gowthammm\",\n    age = 25,\n    gender = \"male\",\n    height = 175, // cm\n    weight = 70, // kg\n    activityLevel = \"moderately_active\",\n    goal = \"weight_loss\",\n    weeklyChange = 0.5\n  } = userProfile;\n\n  // Calculate target weight (assuming weight loss goal)\n  const targetWeight = goal === \"weight_loss\" ? weight - 5 : weight + 5;\n\n  // Generate realistic workout data\n  const workoutsThisWeek = Math.floor(Math.random() * 4) + 3; // 3-6 workouts\n  const totalWorkouts = Math.floor(Math.random() * 50) + 20; // 20-70 total workouts\n\n  // Generate calorie data\n  const caloriesToday = Math.floor(Math.random() * 500) + 1500; // 1500-2000 calories\n  const streakDays = Math.floor(Math.random() * 30) + 5; // 5-35 day streak\n\n  // Generate weight entries for the last 30 days\n  const weightEntries = generateWeightEntries(weight, 30);\n\n  // Generate workout history\n  const workoutHistory = generateWorkoutHistory(totalWorkouts);\n\n  // Generate meal history\n  const mealHistory = generateMealHistory(7); // Last 7 days\n\n  return {\n    // User profile data\n    name,\n    age: age.toString(),\n    gender,\n    height: height.toString(),\n    weight: weight.toString(),\n    activityLevel,\n    goal,\n    weeklyChange: weeklyChange.toString(),\n    targetWeight: targetWeight.toString(),\n    \n    // Activity data\n    workoutsThisWeek: workoutsThisWeek.toString(),\n    totalWorkouts: totalWorkouts.toString(),\n    caloriesToday: caloriesToday.toString(),\n    streakDays: streakDays.toString(),\n\n    // Historical data\n    weightEntries,\n    workoutHistory,\n    mealHistory,\n\n    // Timestamps\n    lastUpdated: new Date().toISOString(),\n    createdAt: new Date(Date.now() - 30 * 24 * 60 * 60 * 1000).toISOString() // 30 days ago\n  };\n};\n\n// Generate realistic weight entries over time\nconst generateWeightEntries = (startingWeight, days) => {\n  const entries = [];\n  let currentWeight = startingWeight;\n  \n  for (let i = days; i >= 0; i--) {\n    const date = new Date();\n    date.setDate(date.getDate() - i);\n    \n    // Small random variation in weight (Â±0.5kg)\n    const variation = (Math.random() - 0.5) * 1;\n    currentWeight = Math.max(65, Math.min(75, currentWeight + variation));\n    \n    entries.push({\n      id: `weight_${i}`,\n      date: date.toISOString().split('T')[0],\n      weight: Math.round(currentWeight * 10) / 10,\n      notes: i % 7 === 0 ? \"Weekly weigh-in\" : \"\"\n    });\n  }\n  \n  return entries;\n};\n\n// Generate workout history\nconst generateWorkoutHistory = (totalWorkouts) => {\n  const workouts = [];\n  const workoutTypes = [\n    \"Strength Training\",\n    \"Cardio\",\n    \"HIIT\",\n    \"Yoga\",\n    \"Running\",\n    \"Swimming\",\n    \"Cycling\"\n  ];\n  \n  for (let i = 0; i < totalWorkouts; i++) {\n    const date = new Date();\n    date.setDate(date.getDate() - Math.floor(Math.random() * 30));\n    \n    const workoutType = workoutTypes[Math.floor(Math.random() * workoutTypes.length)];\n    const duration = Math.floor(Math.random() * 60) + 30; // 30-90 minutes\n    \n    workouts.push({\n      id: `workout_${i}`,\n      date: date.toISOString().split('T')[0],\n      type: workoutType,\n      duration: duration,\n      caloriesBurned: Math.floor(duration * 8 + Math.random() * 200),\n      exercises: generateExercises(workoutType)\n    });\n  }\n  \n  return workouts.sort((a, b) => new Date(b.date) - new Date(a.date));\n};\n\n// Generate exercises for each workout\nconst generateExercises = (workoutType) => {\n  const exerciseMap = {\n    \"Strength Training\": [\n      { name: \"Bench Press\", sets: 3, reps: 10, weight: 60 },\n      { name: \"Squats\", sets: 3, reps: 12, weight: 80 },\n      { name: \"Deadlifts\", sets: 3, reps: 8, weight: 100 }\n    ],\n    \"Cardio\": [\n      { name: \"Treadmill Running\", sets: 1, reps: 30, weight: 0 },\n      { name: \"Elliptical\", sets: 1, reps: 20, weight: 0 }\n    ],\n    \"HIIT\": [\n      { name: \"Burpees\", sets: 4, reps: 15, weight: 0 },\n      { name: \"Mountain Climbers\", sets: 4, reps: 20, weight: 0 },\n      { name: \"Jump Squats\", sets: 4, reps: 12, weight: 0 }\n    ],\n    \"Yoga\": [\n      { name: \"Sun Salutation\", sets: 3, reps: 1, weight: 0 },\n      { name: \"Warrior Poses\", sets: 2, reps: 1, weight: 0 }\n    ],\n    \"Running\": [\n      { name: \"5K Run\", sets: 1, reps: 1, weight: 0 }\n    ],\n    \"Swimming\": [\n      { name: \"Freestyle\", sets: 4, reps: 25, weight: 0 },\n      { name: \"Backstroke\", sets: 2, reps: 20, weight: 0 }\n    ],\n    \"Cycling\": [\n      { name: \"Stationary Bike\", sets: 1, reps: 45, weight: 0 }\n    ]\n  };\n  \n  return exerciseMap[workoutType] || exerciseMap[\"Strength Training\"];\n};\n\n// Generate meal history\nconst generateMealHistory = (days) => {\n  const meals = [];\n  const mealTypes = [\"breakfast\", \"lunch\", \"dinner\", \"snack\"];\n  const foodItems = [\n    { name: \"Oatmeal\", calories: 150, protein: 5, carbs: 27, fat: 3 },\n    { name: \"Banana\", calories: 105, protein: 1, carbs: 27, fat: 0 },\n    { name: \"Chicken Breast\", calories: 165, protein: 31, carbs: 0, fat: 3.6 },\n    { name: \"Brown Rice\", calories: 112, protein: 2.6, carbs: 22, fat: 0.9 },\n    { name: \"Broccoli\", calories: 55, protein: 3.7, carbs: 11, fat: 0.6 },\n    { name: \"Greek Yogurt\", calories: 100, protein: 17, carbs: 6, fat: 0 },\n    { name: \"Almonds\", calories: 164, protein: 6, carbs: 6, fat: 14 },\n    { name: \"Salmon\", calories: 206, protein: 22, carbs: 0, fat: 12 },\n    { name: \"Sweet Potato\", calories: 86, protein: 1.6, carbs: 20, fat: 0.1 },\n    { name: \"Eggs\", calories: 155, protein: 13, carbs: 1.1, fat: 11 }\n  ];\n  \n  for (let i = 0; i < days; i++) {\n    const date = new Date();\n    date.setDate(date.getDate() - i);\n    \n    mealTypes.forEach(mealType => {\n      if (Math.random() > 0.2) { // 80% chance of having each meal\n        const numItems = Math.floor(Math.random() * 3) + 1; // 1-3 food items\n        const selectedFoods = [];\n        \n        for (let j = 0; j < numItems; j++) {\n          const food = foodItems[Math.floor(Math.random() * foodItems.length)];\n          const quantity = Math.random() * 2 + 0.5; // 0.5-2.5 servings\n          \n          selectedFoods.push({\n            name: food.name,\n            quantity: quantity,\n            calories: Math.round(food.calories * quantity),\n            protein: Math.round(food.protein * quantity * 10) / 10,\n            carbs: Math.round(food.carbs * quantity * 10) / 10,\n            fat: Math.round(food.fat * quantity * 10) / 10\n          });\n        }\n        \n        const totalCalories = selectedFoods.reduce((sum, item) => sum + item.calories, 0);\n        const totalProtein = selectedFoods.reduce((sum, item) => sum + item.protein, 0);\n        const totalCarbs = selectedFoods.reduce((sum, item) => sum + item.carbs, 0);\n        const totalFat = selectedFoods.reduce((sum, item) => sum + item.fat, 0);\n        \n        meals.push({\n          id: `meal_${i}_${mealType}`,\n          date: date.toISOString().split('T')[0],\n          mealType: mealType,\n          foodItems: selectedFoods,\n          totalCalories: Math.round(totalCalories),\n          totalProtein: Math.round(totalProtein * 10) / 10,\n          totalCarbs: Math.round(totalCarbs * 10) / 10,\n          totalFat: Math.round(totalFat * 10) / 10\n        });\n      }\n    });\n  }\n  \n  return meals.sort((a, b) => new Date(b.date) - new Date(a.date));\n};\n\n// Initialize sample data in localStorage\nexport const initializeSampleData = (userProfile = {}) => {\n  const sampleData = generateSampleUserData(userProfile);\n  \n  // Save user profile data\n  localStorage.setItem('fitnessTrackerData', JSON.stringify({\n    name: sampleData.name,\n    age: sampleData.age,\n    gender: sampleData.gender,\n    height: sampleData.height,\n    weight: sampleData.weight,\n    activityLevel: sampleData.activityLevel,\n    goal: sampleData.goal,\n    weeklyChange: sampleData.weeklyChange,\n    targetWeight: sampleData.targetWeight,\n    workoutsThisWeek: sampleData.workoutsThisWeek,\n    totalWorkouts: sampleData.totalWorkouts,\n    caloriesToday: sampleData.caloriesToday,\n    streakDays: sampleData.streakDays\n  }));\n  \n  // Save historical data\n  localStorage.setItem('weightEntries', JSON.stringify(sampleData.weightEntries));\n  localStorage.setItem('workouts', JSON.stringify(sampleData.workoutHistory));\n  localStorage.setItem('meals', JSON.stringify(sampleData.mealHistory));\n  \n  console.log('Sample data initialized successfully!');\n  return sampleData;\n};\n\n// Check if data exists, if not initialize sample data\nexport const ensureDataExists = (userProfile = {}) => {\n  const existingData = localStorage.getItem('fitnessTrackerData');\n  if (!existingData || existingData === '{}') {\n    return initializeSampleData(userProfile);\n  }\n  return JSON.parse(existingData);\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}