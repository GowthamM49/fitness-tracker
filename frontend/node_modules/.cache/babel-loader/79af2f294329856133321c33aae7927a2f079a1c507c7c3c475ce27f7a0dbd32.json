{"ast":null,"code":"import api from './api';\nexport const authService = {\n  // Login user\n  async login(email, password) {\n    try {\n      const response = await api.post('/auth/login', {\n        email,\n        password\n      });\n      return response.data;\n    } catch (error) {\n      var _error$response, _error$response$data;\n      throw new Error(((_error$response = error.response) === null || _error$response === void 0 ? void 0 : (_error$response$data = _error$response.data) === null || _error$response$data === void 0 ? void 0 : _error$response$data.message) || 'Login failed');\n    }\n  },\n  // Register user\n  async register(userData) {\n    try {\n      const response = await api.post('/auth/register', userData);\n      return response.data;\n    } catch (error) {\n      var _error$response2, _error$response2$data;\n      throw new Error(((_error$response2 = error.response) === null || _error$response2 === void 0 ? void 0 : (_error$response2$data = _error$response2.data) === null || _error$response2$data === void 0 ? void 0 : _error$response2$data.message) || 'Registration failed');\n    }\n  },\n  // Get current user\n  async getCurrentUser() {\n    try {\n      const response = await api.get('/auth/me');\n      return response.data;\n    } catch (error) {\n      var _error$response3, _error$response3$data;\n      throw new Error(((_error$response3 = error.response) === null || _error$response3 === void 0 ? void 0 : (_error$response3$data = _error$response3.data) === null || _error$response3$data === void 0 ? void 0 : _error$response3$data.message) || 'Failed to get user data');\n    }\n  },\n  // Update user profile\n  async updateProfile(userData) {\n    try {\n      const response = await api.put('/auth/profile', userData);\n      return response.data;\n    } catch (error) {\n      var _error$response4, _error$response4$data;\n      throw new Error(((_error$response4 = error.response) === null || _error$response4 === void 0 ? void 0 : (_error$response4$data = _error$response4.data) === null || _error$response4$data === void 0 ? void 0 : _error$response4$data.message) || 'Failed to update profile');\n    }\n  },\n  // Change password\n  async changePassword(currentPassword, newPassword) {\n    try {\n      const response = await api.put('/auth/change-password', {\n        currentPassword,\n        newPassword\n      });\n      return response.data;\n    } catch (error) {\n      var _error$response5, _error$response5$data;\n      throw new Error(((_error$response5 = error.response) === null || _error$response5 === void 0 ? void 0 : (_error$response5$data = _error$response5.data) === null || _error$response5$data === void 0 ? void 0 : _error$response5$data.message) || 'Failed to change password');\n    }\n  },\n  // Forgot password\n  async forgotPassword(email) {\n    try {\n      const response = await api.post('/auth/forgot-password', {\n        email\n      });\n      return response.data;\n    } catch (error) {\n      var _error$response6, _error$response6$data;\n      throw new Error(((_error$response6 = error.response) === null || _error$response6 === void 0 ? void 0 : (_error$response6$data = _error$response6.data) === null || _error$response6$data === void 0 ? void 0 : _error$response6$data.message) || 'Failed to send reset email');\n    }\n  },\n  // Reset password\n  async resetPassword(token, newPassword) {\n    try {\n      const response = await api.post('/auth/reset-password', {\n        token,\n        newPassword\n      });\n      return response.data;\n    } catch (error) {\n      var _error$response7, _error$response7$data;\n      throw new Error(((_error$response7 = error.response) === null || _error$response7 === void 0 ? void 0 : (_error$response7$data = _error$response7.data) === null || _error$response7$data === void 0 ? void 0 : _error$response7$data.message) || 'Failed to reset password');\n    }\n  }\n};","map":{"version":3,"names":["api","authService","login","email","password","response","post","data","error","_error$response","_error$response$data","Error","message","register","userData","_error$response2","_error$response2$data","getCurrentUser","get","_error$response3","_error$response3$data","updateProfile","put","_error$response4","_error$response4$data","changePassword","currentPassword","newPassword","_error$response5","_error$response5$data","forgotPassword","_error$response6","_error$response6$data","resetPassword","token","_error$response7","_error$response7$data"],"sources":["C:/Users/gowth_tq3ir2j/OneDrive/Documents/project 3rd year/one credit/Fitness Tracker/frontend/src/services/authService.js"],"sourcesContent":["import api from './api';\n\nexport const authService = {\n  // Login user\n  async login(email, password) {\n    try {\n      const response = await api.post('/auth/login', { email, password });\n      return response.data;\n    } catch (error) {\n      throw new Error(error.response?.data?.message || 'Login failed');\n    }\n  },\n\n  // Register user\n  async register(userData) {\n    try {\n      const response = await api.post('/auth/register', userData);\n      return response.data;\n    } catch (error) {\n      throw new Error(error.response?.data?.message || 'Registration failed');\n    }\n  },\n\n  // Get current user\n  async getCurrentUser() {\n    try {\n      const response = await api.get('/auth/me');\n      return response.data;\n    } catch (error) {\n      throw new Error(error.response?.data?.message || 'Failed to get user data');\n    }\n  },\n\n  // Update user profile\n  async updateProfile(userData) {\n    try {\n      const response = await api.put('/auth/profile', userData);\n      return response.data;\n    } catch (error) {\n      throw new Error(error.response?.data?.message || 'Failed to update profile');\n    }\n  },\n\n  // Change password\n  async changePassword(currentPassword, newPassword) {\n    try {\n      const response = await api.put('/auth/change-password', {\n        currentPassword,\n        newPassword\n      });\n      return response.data;\n    } catch (error) {\n      throw new Error(error.response?.data?.message || 'Failed to change password');\n    }\n  },\n\n  // Forgot password\n  async forgotPassword(email) {\n    try {\n      const response = await api.post('/auth/forgot-password', { email });\n      return response.data;\n    } catch (error) {\n      throw new Error(error.response?.data?.message || 'Failed to send reset email');\n    }\n  },\n\n  // Reset password\n  async resetPassword(token, newPassword) {\n    try {\n      const response = await api.post('/auth/reset-password', {\n        token,\n        newPassword\n      });\n      return response.data;\n    } catch (error) {\n      throw new Error(error.response?.data?.message || 'Failed to reset password');\n    }\n  }\n}; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}