{"ast":null,"code":"// Fitness calculation utilities for user input\n\n/**\n * Calculate BMI (Body Mass Index)\n * @param {number} weight - Weight in kg\n * @param {number} height - Height in meters\n * @returns {object} BMI value and category\n */\nexport const calculateBMI = (weight, height) => {\n  if (weight <= 0 || height <= 0) {\n    return {\n      bmi: 0,\n      category: 'Invalid',\n      color: 'error'\n    };\n  }\n  const bmi = weight / (height * height);\n  let category, color;\n  if (bmi < 18.5) {\n    category = 'Underweight';\n    color = 'warning';\n  } else if (bmi >= 18.5 && bmi < 25) {\n    category = 'Normal';\n    color = 'success';\n  } else if (bmi >= 25 && bmi < 30) {\n    category = 'Overweight';\n    color = 'warning';\n  } else {\n    category = 'Obese';\n    color = 'error';\n  }\n  return {\n    bmi: bmi.toFixed(1),\n    category,\n    color\n  };\n};\n\n/**\n * Calculate BMR (Basal Metabolic Rate) using Mifflin-St Jeor Equation\n * @param {number} weight - Weight in kg\n * @param {number} height - Height in cm\n * @param {number} age - Age in years\n * @param {string} gender - 'male' or 'female'\n * @returns {number} BMR in calories\n */\nexport const calculateBMR = (weight, height, age, gender) => {\n  if (weight <= 0 || height <= 0 || age <= 0) {\n    return 0;\n  }\n  let bmr;\n  if (gender.toLowerCase() === 'male') {\n    bmr = 10 * weight + 6.25 * height - 5 * age + 5;\n  } else {\n    bmr = 10 * weight + 6.25 * height - 5 * age - 161;\n  }\n  return Math.round(bmr);\n};\n\n/**\n * Calculate TDEE (Total Daily Energy Expenditure)\n * @param {number} bmr - BMR value\n * @param {string} activityLevel - Activity level description\n * @returns {number} TDEE in calories\n */\nexport const calculateTDEE = (bmr, activityLevel) => {\n  const activityMultipliers = {\n    'sedentary': 1.2,\n    // Little or no exercise\n    'light': 1.375,\n    // Light exercise 1-3 days/week\n    'moderate': 1.55,\n    // Moderate exercise 3-5 days/week\n    'active': 1.725,\n    // Hard exercise 6-7 days/week\n    'very_active': 1.9 // Very hard exercise, physical job\n  };\n  const multiplier = activityMultipliers[activityLevel.toLowerCase()] || 1.2;\n  return Math.round(bmr * multiplier);\n};\n\n/**\n * Calculate weight loss/gain calorie target\n * @param {number} tdee - TDEE value\n * @param {string} goal - 'lose', 'maintain', or 'gain'\n * @param {number} weeklyChange - Weekly weight change goal in kg\n * @returns {object} Calorie target and weekly change\n */\nexport const calculateCalorieTarget = (tdee, goal, weeklyChange = 0.5) => {\n  let targetCalories;\n  switch (goal.toLowerCase()) {\n    case 'lose':\n      // 1 kg = 7700 calories, so weeklyChange kg = weeklyChange * 7700 calories\n      const weeklyDeficit = weeklyChange * 7700;\n      const dailyDeficit = weeklyDeficit / 7;\n      targetCalories = tdee - dailyDeficit;\n      break;\n    case 'gain':\n      const weeklySurplus = weeklyChange * 7700;\n      const dailySurplus = weeklySurplus / 7;\n      targetCalories = tdee + dailySurplus;\n      break;\n    default:\n      // maintain\n      targetCalories = tdee;\n      weeklyChange = 0;\n  }\n  return {\n    targetCalories: Math.round(targetCalories),\n    weeklyChange: weeklyChange,\n    goal: goal\n  };\n};\n\n/**\n * Calculate protein needs based on weight and activity\n * @param {number} weight - Weight in kg\n * @param {string} activityLevel - Activity level\n * @returns {object} Protein needs in grams and calories\n */\nexport const calculateProteinNeeds = (weight, activityLevel) => {\n  let proteinPerKg;\n  switch (activityLevel.toLowerCase()) {\n    case 'sedentary':\n      proteinPerKg = 0.8;\n      break;\n    case 'light':\n      proteinPerKg = 1.0;\n      break;\n    case 'moderate':\n      proteinPerKg = 1.2;\n      break;\n    case 'active':\n      proteinPerKg = 1.4;\n      break;\n    case 'very_active':\n      proteinPerKg = 1.6;\n      break;\n    default:\n      proteinPerKg = 1.0;\n  }\n  const proteinGrams = Math.round(weight * proteinPerKg);\n  const proteinCalories = proteinGrams * 4; // 4 calories per gram of protein\n\n  return {\n    proteinGrams,\n    proteinCalories\n  };\n};\n\n/**\n * Calculate workout calories burned\n * @param {string} activity - Type of activity\n * @param {number} duration - Duration in minutes\n * @param {number} weight - Weight in kg\n * @returns {number} Calories burned\n */\nexport const calculateWorkoutCalories = (activity, duration, weight) => {\n  const activityMETs = {\n    'walking': 3.5,\n    'jogging': 7.0,\n    'running': 11.5,\n    'cycling': 8.0,\n    'swimming': 6.0,\n    'weightlifting': 3.0,\n    'yoga': 2.5,\n    'pilates': 3.0,\n    'dancing': 4.5,\n    'basketball': 8.0,\n    'soccer': 7.0,\n    'tennis': 6.0\n  };\n  const met = activityMETs[activity.toLowerCase()] || 3.0;\n  const caloriesBurned = met * weight * duration / 60;\n  return Math.round(caloriesBurned);\n};\n\n/**\n * Calculate progress percentage\n * @param {number} current - Current value\n * @param {number} target - Target value\n * @param {string} type - 'weight_loss', 'weight_gain', or 'calorie'\n * @returns {object} Progress percentage and status\n */\nexport const calculateProgress = (current, target, type = 'weight_loss') => {\n  if (target === 0) return {\n    percentage: 0,\n    status: 'No target set'\n  };\n  let percentage, status;\n  switch (type) {\n    case 'weight_loss':\n      // For weight loss, we want current to be less than target\n      if (current <= target) {\n        percentage = 100;\n        status = 'Goal achieved!';\n      } else {\n        percentage = Math.max(0, Math.min(100, (current - target) / (current - target + 1) * 100));\n        status = 'In progress';\n      }\n      break;\n    case 'weight_gain':\n      // For weight gain, we want current to be more than target\n      if (current >= target) {\n        percentage = 100;\n        status = 'Goal achieved!';\n      } else {\n        percentage = Math.max(0, Math.min(100, current / target * 100));\n        status = 'In progress';\n      }\n      break;\n    case 'calorie':\n      // For calories, we want current to be close to target\n      percentage = Math.max(0, Math.min(100, current / target * 100));\n      if (percentage >= 90 && percentage <= 110) {\n        status = 'On target';\n      } else if (percentage < 90) {\n        status = 'Under target';\n      } else {\n        status = 'Over target';\n      }\n      break;\n    default:\n      percentage = 0;\n      status = 'Unknown type';\n  }\n  return {\n    percentage: Math.round(percentage),\n    status\n  };\n};\n\n/**\n * Calculate ideal weight range based on height and gender\n * @param {number} height - Height in cm\n * @param {string} gender - 'male' or 'female'\n * @returns {object} Min and max ideal weight in kg\n */\nexport const calculateIdealWeightRange = (height, gender) => {\n  if (height <= 0) return {\n    min: 0,\n    max: 0\n  };\n  const heightM = height / 100;\n\n  // Using BMI range 18.5-24.9 for healthy weight\n  const minWeight = 18.5 * heightM * heightM;\n  const maxWeight = 24.9 * heightM * heightM;\n  return {\n    min: Math.round(minWeight),\n    max: Math.round(maxWeight),\n    height: heightM\n  };\n};\nexport default {\n  calculateBMI,\n  calculateBMR,\n  calculateTDEE,\n  calculateCalorieTarget,\n  calculateProteinNeeds,\n  calculateWorkoutCalories,\n  calculateProgress,\n  calculateIdealWeightRange\n};","map":{"version":3,"names":["calculateBMI","weight","height","bmi","category","color","toFixed","calculateBMR","age","gender","bmr","toLowerCase","Math","round","calculateTDEE","activityLevel","activityMultipliers","multiplier","calculateCalorieTarget","tdee","goal","weeklyChange","targetCalories","weeklyDeficit","dailyDeficit","weeklySurplus","dailySurplus","calculateProteinNeeds","proteinPerKg","proteinGrams","proteinCalories","calculateWorkoutCalories","activity","duration","activityMETs","met","caloriesBurned","calculateProgress","current","target","type","percentage","status","max","min","calculateIdealWeightRange","heightM","minWeight","maxWeight"],"sources":["C:/Users/gowth_tq3ir2j/OneDrive/Documents/project 3rd year/one credit/Fitness Tracker/frontend/src/utils/calculations.js"],"sourcesContent":["// Fitness calculation utilities for user input\n\n/**\n * Calculate BMI (Body Mass Index)\n * @param {number} weight - Weight in kg\n * @param {number} height - Height in meters\n * @returns {object} BMI value and category\n */\nexport const calculateBMI = (weight, height) => {\n  if (weight <= 0 || height <= 0) {\n    return { bmi: 0, category: 'Invalid', color: 'error' };\n  }\n  \n  const bmi = weight / (height * height);\n  \n  let category, color;\n  if (bmi < 18.5) {\n    category = 'Underweight';\n    color = 'warning';\n  } else if (bmi >= 18.5 && bmi < 25) {\n    category = 'Normal';\n    color = 'success';\n  } else if (bmi >= 25 && bmi < 30) {\n    category = 'Overweight';\n    color = 'warning';\n  } else {\n    category = 'Obese';\n    color = 'error';\n  }\n  \n  return { bmi: bmi.toFixed(1), category, color };\n};\n\n/**\n * Calculate BMR (Basal Metabolic Rate) using Mifflin-St Jeor Equation\n * @param {number} weight - Weight in kg\n * @param {number} height - Height in cm\n * @param {number} age - Age in years\n * @param {string} gender - 'male' or 'female'\n * @returns {number} BMR in calories\n */\nexport const calculateBMR = (weight, height, age, gender) => {\n  if (weight <= 0 || height <= 0 || age <= 0) {\n    return 0;\n  }\n  \n  let bmr;\n  if (gender.toLowerCase() === 'male') {\n    bmr = (10 * weight) + (6.25 * height) - (5 * age) + 5;\n  } else {\n    bmr = (10 * weight) + (6.25 * height) - (5 * age) - 161;\n  }\n  \n  return Math.round(bmr);\n};\n\n/**\n * Calculate TDEE (Total Daily Energy Expenditure)\n * @param {number} bmr - BMR value\n * @param {string} activityLevel - Activity level description\n * @returns {number} TDEE in calories\n */\nexport const calculateTDEE = (bmr, activityLevel) => {\n  const activityMultipliers = {\n    'sedentary': 1.2,        // Little or no exercise\n    'light': 1.375,          // Light exercise 1-3 days/week\n    'moderate': 1.55,        // Moderate exercise 3-5 days/week\n    'active': 1.725,         // Hard exercise 6-7 days/week\n    'very_active': 1.9       // Very hard exercise, physical job\n  };\n  \n  const multiplier = activityMultipliers[activityLevel.toLowerCase()] || 1.2;\n  return Math.round(bmr * multiplier);\n};\n\n/**\n * Calculate weight loss/gain calorie target\n * @param {number} tdee - TDEE value\n * @param {string} goal - 'lose', 'maintain', or 'gain'\n * @param {number} weeklyChange - Weekly weight change goal in kg\n * @returns {object} Calorie target and weekly change\n */\nexport const calculateCalorieTarget = (tdee, goal, weeklyChange = 0.5) => {\n  let targetCalories;\n  \n  switch (goal.toLowerCase()) {\n    case 'lose':\n      // 1 kg = 7700 calories, so weeklyChange kg = weeklyChange * 7700 calories\n      const weeklyDeficit = weeklyChange * 7700;\n      const dailyDeficit = weeklyDeficit / 7;\n      targetCalories = tdee - dailyDeficit;\n      break;\n    case 'gain':\n      const weeklySurplus = weeklyChange * 7700;\n      const dailySurplus = weeklySurplus / 7;\n      targetCalories = tdee + dailySurplus;\n      break;\n    default: // maintain\n      targetCalories = tdee;\n      weeklyChange = 0;\n  }\n  \n  return {\n    targetCalories: Math.round(targetCalories),\n    weeklyChange: weeklyChange,\n    goal: goal\n  };\n};\n\n/**\n * Calculate protein needs based on weight and activity\n * @param {number} weight - Weight in kg\n * @param {string} activityLevel - Activity level\n * @returns {object} Protein needs in grams and calories\n */\nexport const calculateProteinNeeds = (weight, activityLevel) => {\n  let proteinPerKg;\n  \n  switch (activityLevel.toLowerCase()) {\n    case 'sedentary':\n      proteinPerKg = 0.8;\n      break;\n    case 'light':\n      proteinPerKg = 1.0;\n      break;\n    case 'moderate':\n      proteinPerKg = 1.2;\n      break;\n    case 'active':\n      proteinPerKg = 1.4;\n      break;\n    case 'very_active':\n      proteinPerKg = 1.6;\n      break;\n    default:\n      proteinPerKg = 1.0;\n  }\n  \n  const proteinGrams = Math.round(weight * proteinPerKg);\n  const proteinCalories = proteinGrams * 4; // 4 calories per gram of protein\n  \n  return { proteinGrams, proteinCalories };\n};\n\n/**\n * Calculate workout calories burned\n * @param {string} activity - Type of activity\n * @param {number} duration - Duration in minutes\n * @param {number} weight - Weight in kg\n * @returns {number} Calories burned\n */\nexport const calculateWorkoutCalories = (activity, duration, weight) => {\n  const activityMETs = {\n    'walking': 3.5,\n    'jogging': 7.0,\n    'running': 11.5,\n    'cycling': 8.0,\n    'swimming': 6.0,\n    'weightlifting': 3.0,\n    'yoga': 2.5,\n    'pilates': 3.0,\n    'dancing': 4.5,\n    'basketball': 8.0,\n    'soccer': 7.0,\n    'tennis': 6.0\n  };\n  \n  const met = activityMETs[activity.toLowerCase()] || 3.0;\n  const caloriesBurned = (met * weight * duration) / 60;\n  \n  return Math.round(caloriesBurned);\n};\n\n/**\n * Calculate progress percentage\n * @param {number} current - Current value\n * @param {number} target - Target value\n * @param {string} type - 'weight_loss', 'weight_gain', or 'calorie'\n * @returns {object} Progress percentage and status\n */\nexport const calculateProgress = (current, target, type = 'weight_loss') => {\n  if (target === 0) return { percentage: 0, status: 'No target set' };\n  \n  let percentage, status;\n  \n  switch (type) {\n    case 'weight_loss':\n      // For weight loss, we want current to be less than target\n      if (current <= target) {\n        percentage = 100;\n        status = 'Goal achieved!';\n      } else {\n        percentage = Math.max(0, Math.min(100, ((current - target) / (current - target + 1)) * 100));\n        status = 'In progress';\n      }\n      break;\n    case 'weight_gain':\n      // For weight gain, we want current to be more than target\n      if (current >= target) {\n        percentage = 100;\n        status = 'Goal achieved!';\n      } else {\n        percentage = Math.max(0, Math.min(100, (current / target) * 100));\n        status = 'In progress';\n      }\n      break;\n    case 'calorie':\n      // For calories, we want current to be close to target\n      percentage = Math.max(0, Math.min(100, (current / target) * 100));\n      if (percentage >= 90 && percentage <= 110) {\n        status = 'On target';\n      } else if (percentage < 90) {\n        status = 'Under target';\n      } else {\n        status = 'Over target';\n      }\n      break;\n    default:\n      percentage = 0;\n      status = 'Unknown type';\n  }\n  \n  return { percentage: Math.round(percentage), status };\n};\n\n/**\n * Calculate ideal weight range based on height and gender\n * @param {number} height - Height in cm\n * @param {string} gender - 'male' or 'female'\n * @returns {object} Min and max ideal weight in kg\n */\nexport const calculateIdealWeightRange = (height, gender) => {\n  if (height <= 0) return { min: 0, max: 0 };\n  \n  const heightM = height / 100;\n  \n  // Using BMI range 18.5-24.9 for healthy weight\n  const minWeight = 18.5 * heightM * heightM;\n  const maxWeight = 24.9 * heightM * heightM;\n  \n  return {\n    min: Math.round(minWeight),\n    max: Math.round(maxWeight),\n    height: heightM\n  };\n};\n\nexport default {\n  calculateBMI,\n  calculateBMR,\n  calculateTDEE,\n  calculateCalorieTarget,\n  calculateProteinNeeds,\n  calculateWorkoutCalories,\n  calculateProgress,\n  calculateIdealWeightRange\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}