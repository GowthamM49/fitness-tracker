{"ast":null,"code":"import axios from 'axios';\nconst API_BASE_URL = process.env.REACT_APP_API_URL || 'http://localhost:5000/api';\n\n// Create axios instance with base configuration\nconst api = axios.create({\n  baseURL: API_BASE_URL,\n  headers: {\n    'Content-Type': 'application/json'\n  }\n});\n\n// Add token to requests if available\napi.interceptors.request.use(config => {\n  const token = localStorage.getItem('token');\n  if (token) {\n    config.headers.Authorization = `Bearer ${token}`;\n  }\n  return config;\n});\n\n// Handle token expiration\napi.interceptors.response.use(response => response, error => {\n  var _error$response;\n  if (((_error$response = error.response) === null || _error$response === void 0 ? void 0 : _error$response.status) === 401) {\n    localStorage.removeItem('token');\n    window.location.href = '/login';\n  }\n  return Promise.reject(error);\n});\nexport const authService = {\n  // Login user\n  async login(email, password) {\n    try {\n      const response = await api.post('/auth/login', {\n        email,\n        password\n      });\n      return response.data;\n    } catch (error) {\n      var _error$response2, _error$response2$data;\n      throw new Error(((_error$response2 = error.response) === null || _error$response2 === void 0 ? void 0 : (_error$response2$data = _error$response2.data) === null || _error$response2$data === void 0 ? void 0 : _error$response2$data.message) || 'Login failed');\n    }\n  },\n  // Register user\n  async register(userData) {\n    try {\n      const response = await api.post('/auth/register', userData);\n      return response.data;\n    } catch (error) {\n      var _error$response3, _error$response3$data;\n      throw new Error(((_error$response3 = error.response) === null || _error$response3 === void 0 ? void 0 : (_error$response3$data = _error$response3.data) === null || _error$response3$data === void 0 ? void 0 : _error$response3$data.message) || 'Registration failed');\n    }\n  },\n  // Get current user\n  async getCurrentUser() {\n    try {\n      const response = await api.get('/auth/me');\n      return response.data;\n    } catch (error) {\n      var _error$response4, _error$response4$data;\n      throw new Error(((_error$response4 = error.response) === null || _error$response4 === void 0 ? void 0 : (_error$response4$data = _error$response4.data) === null || _error$response4$data === void 0 ? void 0 : _error$response4$data.message) || 'Failed to get user data');\n    }\n  },\n  // Update user profile\n  async updateProfile(userData) {\n    try {\n      const response = await api.put('/auth/profile', userData);\n      return response.data;\n    } catch (error) {\n      var _error$response5, _error$response5$data;\n      throw new Error(((_error$response5 = error.response) === null || _error$response5 === void 0 ? void 0 : (_error$response5$data = _error$response5.data) === null || _error$response5$data === void 0 ? void 0 : _error$response5$data.message) || 'Failed to update profile');\n    }\n  },\n  // Change password\n  async changePassword(currentPassword, newPassword) {\n    try {\n      const response = await api.put('/auth/change-password', {\n        currentPassword,\n        newPassword\n      });\n      return response.data;\n    } catch (error) {\n      var _error$response6, _error$response6$data;\n      throw new Error(((_error$response6 = error.response) === null || _error$response6 === void 0 ? void 0 : (_error$response6$data = _error$response6.data) === null || _error$response6$data === void 0 ? void 0 : _error$response6$data.message) || 'Failed to change password');\n    }\n  },\n  // Forgot password\n  async forgotPassword(email) {\n    try {\n      const response = await api.post('/auth/forgot-password', {\n        email\n      });\n      return response.data;\n    } catch (error) {\n      var _error$response7, _error$response7$data;\n      throw new Error(((_error$response7 = error.response) === null || _error$response7 === void 0 ? void 0 : (_error$response7$data = _error$response7.data) === null || _error$response7$data === void 0 ? void 0 : _error$response7$data.message) || 'Failed to send reset email');\n    }\n  },\n  // Reset password\n  async resetPassword(token, newPassword) {\n    try {\n      const response = await api.post('/auth/reset-password', {\n        token,\n        newPassword\n      });\n      return response.data;\n    } catch (error) {\n      var _error$response8, _error$response8$data;\n      throw new Error(((_error$response8 = error.response) === null || _error$response8 === void 0 ? void 0 : (_error$response8$data = _error$response8.data) === null || _error$response8$data === void 0 ? void 0 : _error$response8$data.message) || 'Failed to reset password');\n    }\n  }\n};","map":{"version":3,"names":["axios","API_BASE_URL","process","env","REACT_APP_API_URL","api","create","baseURL","headers","interceptors","request","use","config","token","localStorage","getItem","Authorization","response","error","_error$response","status","removeItem","window","location","href","Promise","reject","authService","login","email","password","post","data","_error$response2","_error$response2$data","Error","message","register","userData","_error$response3","_error$response3$data","getCurrentUser","get","_error$response4","_error$response4$data","updateProfile","put","_error$response5","_error$response5$data","changePassword","currentPassword","newPassword","_error$response6","_error$response6$data","forgotPassword","_error$response7","_error$response7$data","resetPassword","_error$response8","_error$response8$data"],"sources":["C:/Users/gowth_tq3ir2j/OneDrive/Documents/project 3rd year/one credit/Fitness Tracker/src/services/authService.js"],"sourcesContent":["import axios from 'axios';\n\nconst API_BASE_URL = process.env.REACT_APP_API_URL || 'http://localhost:5000/api';\n\n// Create axios instance with base configuration\nconst api = axios.create({\n  baseURL: API_BASE_URL,\n  headers: {\n    'Content-Type': 'application/json',\n  },\n});\n\n// Add token to requests if available\napi.interceptors.request.use((config) => {\n  const token = localStorage.getItem('token');\n  if (token) {\n    config.headers.Authorization = `Bearer ${token}`;\n  }\n  return config;\n});\n\n// Handle token expiration\napi.interceptors.response.use(\n  (response) => response,\n  (error) => {\n    if (error.response?.status === 401) {\n      localStorage.removeItem('token');\n      window.location.href = '/login';\n    }\n    return Promise.reject(error);\n  }\n);\n\nexport const authService = {\n  // Login user\n  async login(email, password) {\n    try {\n      const response = await api.post('/auth/login', { email, password });\n      return response.data;\n    } catch (error) {\n      throw new Error(error.response?.data?.message || 'Login failed');\n    }\n  },\n\n  // Register user\n  async register(userData) {\n    try {\n      const response = await api.post('/auth/register', userData);\n      return response.data;\n    } catch (error) {\n      throw new Error(error.response?.data?.message || 'Registration failed');\n    }\n  },\n\n  // Get current user\n  async getCurrentUser() {\n    try {\n      const response = await api.get('/auth/me');\n      return response.data;\n    } catch (error) {\n      throw new Error(error.response?.data?.message || 'Failed to get user data');\n    }\n  },\n\n  // Update user profile\n  async updateProfile(userData) {\n    try {\n      const response = await api.put('/auth/profile', userData);\n      return response.data;\n    } catch (error) {\n      throw new Error(error.response?.data?.message || 'Failed to update profile');\n    }\n  },\n\n  // Change password\n  async changePassword(currentPassword, newPassword) {\n    try {\n      const response = await api.put('/auth/change-password', {\n        currentPassword,\n        newPassword\n      });\n      return response.data;\n    } catch (error) {\n      throw new Error(error.response?.data?.message || 'Failed to change password');\n    }\n  },\n\n  // Forgot password\n  async forgotPassword(email) {\n    try {\n      const response = await api.post('/auth/forgot-password', { email });\n      return response.data;\n    } catch (error) {\n      throw new Error(error.response?.data?.message || 'Failed to send reset email');\n    }\n  },\n\n  // Reset password\n  async resetPassword(token, newPassword) {\n    try {\n      const response = await api.post('/auth/reset-password', {\n        token,\n        newPassword\n      });\n      return response.data;\n    } catch (error) {\n      throw new Error(error.response?.data?.message || 'Failed to reset password');\n    }\n  }\n}; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}