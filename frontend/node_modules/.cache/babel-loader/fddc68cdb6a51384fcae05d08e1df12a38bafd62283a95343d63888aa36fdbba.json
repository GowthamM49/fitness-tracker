{"ast":null,"code":"import mockApi from './mockApi';\nexport const authService = {\n  // Login user\n  async login(email, password) {\n    try {\n      // Mock login - in real app this would validate credentials\n      if (!email || !password) {\n        throw new Error('Email and password are required');\n      }\n      if (password.length < 6) {\n        throw new Error('Password must be at least 6 characters');\n      }\n\n      // Simulate successful login\n      const user = await mockApi.getProfile();\n      return {\n        user: user.data,\n        token: 'mock-jwt-token-' + Date.now()\n      };\n    } catch (error) {\n      throw new Error(error.message || 'Login failed');\n    }\n  },\n  // Register user\n  async register(userData) {\n    try {\n      // Mock registration - in real app this would create a new user\n      if (!userData.email || !userData.password) {\n        throw new Error('Email and password are required');\n      }\n      if (userData.password !== userData.confirmPassword) {\n        throw new Error('Passwords do not match');\n      }\n\n      // Simulate successful registration\n      const user = await mockApi.updateProfile(userData);\n      return {\n        user: user.data,\n        token: 'mock-jwt-token-' + Date.now()\n      };\n    } catch (error) {\n      throw new Error(error.message || 'Registration failed');\n    }\n  },\n  // Get current user\n  async getCurrentUser() {\n    try {\n      const {\n        data\n      } = await mockApi.getProfile();\n      return data;\n    } catch (error) {\n      throw new Error(error.message || 'Failed to get user data');\n    }\n  },\n  // Update user profile\n  async updateProfile(userData) {\n    try {\n      const {\n        data\n      } = await mockApi.updateProfile(userData);\n      return data;\n    } catch (error) {\n      throw new Error(error.message || 'Failed to update profile');\n    }\n  },\n  // Change password\n  async changePassword(currentPassword, newPassword) {\n    try {\n      const {\n        data\n      } = await mockApi.updatePassword({\n        currentPassword,\n        newPassword\n      });\n      return data;\n    } catch (error) {\n      throw new Error(error.message || 'Failed to change password');\n    }\n  },\n  // Forgot password\n  async forgotPassword(email) {\n    try {\n      // Mock forgot password\n      return {\n        message: 'Password reset email sent successfully'\n      };\n    } catch (error) {\n      throw new Error(error.message || 'Failed to send reset email');\n    }\n  },\n  // Reset password\n  async resetPassword(token, newPassword) {\n    try {\n      // Mock password reset\n      return {\n        message: 'Password reset successfully'\n      };\n    } catch (error) {\n      throw new Error(error.message || 'Failed to reset password');\n    }\n  }\n};","map":{"version":3,"names":["mockApi","authService","login","email","password","Error","length","user","getProfile","data","token","Date","now","error","message","register","userData","confirmPassword","updateProfile","getCurrentUser","changePassword","currentPassword","newPassword","updatePassword","forgotPassword","resetPassword"],"sources":["C:/Users/gowth_tq3ir2j/OneDrive/Documents/project 3rd year/one credit/Fitness Tracker/src/services/authService.js"],"sourcesContent":["import mockApi from './mockApi';\n\nexport const authService = {\n  // Login user\n  async login(email, password) {\n    try {\n      // Mock login - in real app this would validate credentials\n      if (!email || !password) {\n        throw new Error('Email and password are required');\n      }\n      if (password.length < 6) {\n        throw new Error('Password must be at least 6 characters');\n      }\n      \n      // Simulate successful login\n      const user = await mockApi.getProfile();\n      return {\n        user: user.data,\n        token: 'mock-jwt-token-' + Date.now()\n      };\n    } catch (error) {\n      throw new Error(error.message || 'Login failed');\n    }\n  },\n\n  // Register user\n  async register(userData) {\n    try {\n      // Mock registration - in real app this would create a new user\n      if (!userData.email || !userData.password) {\n        throw new Error('Email and password are required');\n      }\n      if (userData.password !== userData.confirmPassword) {\n        throw new Error('Passwords do not match');\n      }\n      \n      // Simulate successful registration\n      const user = await mockApi.updateProfile(userData);\n      return {\n        user: user.data,\n        token: 'mock-jwt-token-' + Date.now()\n      };\n    } catch (error) {\n      throw new Error(error.message || 'Registration failed');\n    }\n  },\n\n  // Get current user\n  async getCurrentUser() {\n    try {\n      const { data } = await mockApi.getProfile();\n      return data;\n    } catch (error) {\n      throw new Error(error.message || 'Failed to get user data');\n    }\n  },\n\n  // Update user profile\n  async updateProfile(userData) {\n    try {\n      const { data } = await mockApi.updateProfile(userData);\n      return data;\n    } catch (error) {\n      throw new Error(error.message || 'Failed to update profile');\n    }\n  },\n\n  // Change password\n  async changePassword(currentPassword, newPassword) {\n    try {\n      const { data } = await mockApi.updatePassword({\n        currentPassword,\n        newPassword\n      });\n      return data;\n    } catch (error) {\n      throw new Error(error.message || 'Failed to change password');\n    }\n  },\n\n  // Forgot password\n  async forgotPassword(email) {\n    try {\n      // Mock forgot password\n      return { message: 'Password reset email sent successfully' };\n    } catch (error) {\n      throw new Error(error.message || 'Failed to send reset email');\n    }\n  },\n\n  // Reset password\n  async resetPassword(token, newPassword) {\n    try {\n      // Mock password reset\n      return { message: 'Password reset successfully' };\n    } catch (error) {\n      throw new Error(error.message || 'Failed to reset password');\n    }\n  }\n}; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}